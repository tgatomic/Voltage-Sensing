
Atmel_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000020e2  00002176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  0080013e  0080013e  000021b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f8cd  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e1f  00000000  00000000  00012299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039e2  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001860  00000000  00000000  00017a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003628  00000000  00000000  000192fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a633  00000000  00000000  0001c924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000870  00000000  00000000  00026f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__ctors_end>
       4:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
       8:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
       c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      10:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      14:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__vector_5>
      18:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      1c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      20:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      24:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      28:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      2c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      30:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      34:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      38:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      3c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      40:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      44:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      48:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      4c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      50:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      54:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      58:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      5c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      60:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      64:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__bad_interrupt>
      68:	37 0f       	add	r19, r23
      6a:	3f 0f       	add	r19, r31
      6c:	59 0f       	add	r21, r25
      6e:	49 0f       	add	r20, r25
      70:	59 0f       	add	r21, r25
      72:	59 0f       	add	r21, r25
      74:	59 0f       	add	r21, r25
      76:	59 0f       	add	r21, r25
      78:	59 0f       	add	r21, r25
      7a:	59 0f       	add	r21, r25
      7c:	59 0f       	add	r21, r25
      7e:	59 0f       	add	r21, r25
      80:	59 0f       	add	r21, r25
      82:	59 0f       	add	r21, r25
      84:	59 0f       	add	r21, r25
      86:	59 0f       	add	r21, r25
      88:	59 0f       	add	r21, r25
      8a:	59 0f       	add	r21, r25
      8c:	59 0f       	add	r21, r25
      8e:	59 0f       	add	r21, r25
      90:	59 0f       	add	r21, r25
      92:	59 0f       	add	r21, r25
      94:	59 0f       	add	r21, r25
      96:	59 0f       	add	r21, r25
      98:	59 0f       	add	r21, r25
      9a:	59 0f       	add	r21, r25
      9c:	59 0f       	add	r21, r25
      9e:	59 0f       	add	r21, r25
      a0:	59 0f       	add	r21, r25
      a2:	59 0f       	add	r21, r25
      a4:	31 0f       	add	r19, r17
      a6:	59 0f       	add	r21, r25
      a8:	59 0f       	add	r21, r25
      aa:	59 0f       	add	r21, r25
      ac:	59 0f       	add	r21, r25
      ae:	59 0f       	add	r21, r25
      b0:	59 0f       	add	r21, r25
      b2:	59 0f       	add	r21, r25
      b4:	59 0f       	add	r21, r25
      b6:	25 0f       	add	r18, r21
      b8:	59 0f       	add	r21, r25
      ba:	59 0f       	add	r21, r25
      bc:	59 0f       	add	r21, r25
      be:	59 0f       	add	r21, r25
      c0:	59 0f       	add	r21, r25
      c2:	59 0f       	add	r21, r25
      c4:	59 0f       	add	r21, r25
      c6:	59 0f       	add	r21, r25
      c8:	59 0f       	add	r21, r25
      ca:	59 0f       	add	r21, r25
      cc:	4f 0f       	add	r20, r31
      ce:	54 0f       	add	r21, r20

000000d0 <__trampolines_end>:
      d0:	ff e0       	ldi	r31, 0x0F	; 15
      d2:	ff d1       	rcall	.+1022   	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
      d4:	af ff       	.word	0xffaf	; ????
      d6:	32 ff       	sbrs	r19, 2
      d8:	d0 ff       	sbrs	r29, 0
      da:	fe ff       	Address 0x000000da is out of bounds.
.word	0xffff	; ????

000000db <u8g_dev_ssd13xx_sleep_on>:
      db:	ff e0 ff d1 ae ff d0 ff fe                          .........

000000e4 <u8g_dev_ssd1306_128x64_data_start>:
      e4:	ff e0 ff d1 10 00 ff fe                             ........

000000ec <u8g_dev_ssd1306_128x64_adafruit2_init_seq>:
      ec:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
      fc:	8d 14 20 00 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
     10c:	a6 af ff d0 ff fe                                   ......

00000112 <u8g_font_8x13>:
     112:	01 08 0d 00 fe 09 01 61 02 cd 20 ff fe 0b fe 09     .......a.. .....
     122:	fe 0d 00 80 32 19 89 80 80 80 80 80 80 80 00 80     ....2...........
     132:	28 43 83 90 90 90 13 67 87 48 48 fc 48 fc 48 48     (C.....g.HH.H.HH
     142:	12 59 89 20 78 a0 a0 70 28 28 f0 20 12 69 89 44     .Y. x..p((. .i.D
     152:	a4 48 10 10 20 48 54 88 12 67 87 60 90 90 60 94     .H.. HT..g.`..`.
     162:	88 74 38 13 83 80 80 80 32 39 89 20 40 40 80 80     .t8.....29. @@..
     172:	80 40 40 20 22 39 89 80 40 40 20 20 20 40 40 80     .@@ "9..@@   @@.
     182:	16 65 85 48 30 fc 30 48 14 55 85 20 20 f8 20 20     .e.H0.0H.U.  .  
     192:	11 43 83 70 60 80 16 51 81 f8 21 33 83 40 e0 40     .C.p`..Q..!3.@.@
     1a2:	02 79 89 02 02 04 08 10 20 40 80 80 12 69 89 30     .y...... @...i.0
     1b2:	48 84 84 84 84 84 48 30 12 59 89 20 60 a0 20 20     H.....H0.Y. `.  
     1c2:	20 20 20 f8 12 69 89 78 84 84 04 08 30 40 80 fc        ..i.x....0@..
     1d2:	12 69 89 fc 04 08 10 38 04 04 84 78 12 69 89 08     .i.....8...x.i..
     1e2:	18 28 48 88 88 fc 08 08 12 69 89 fc 80 80 b8 c4     .(H......i......
     1f2:	04 04 84 78 12 69 89 38 40 80 80 b8 c4 84 84 78     ...x.i.8@......x
     202:	12 69 89 fc 04 08 10 10 20 20 40 40 12 69 89 78     .i......  @@.i.x
     212:	84 84 84 78 84 84 84 78 12 69 89 78 84 84 8c 74     ...x...x.i.x...t
     222:	04 04 08 70 21 38 88 40 e0 40 00 00 40 e0 40 11     ...p!8.@.@..@.@.
     232:	48 88 20 70 20 00 00 70 60 80 22 59 89 08 10 20     H. p ..p`."Y... 
     242:	40 80 40 20 10 08 14 64 84 fc 00 00 fc 12 59 89     @.@ ...d......Y.
     252:	80 40 20 10 08 10 20 40 80 12 69 89 78 84 84 04     .@ ... @..i.x...
     262:	08 10 10 00 10 12 69 89 78 84 84 9c a4 ac 94 80     ......i.x.......
     272:	78 12 69 89 30 48 84 84 84 fc 84 84 84 12 69 89     x.i.0H........i.
     282:	f0 88 84 88 f0 88 84 88 f0 12 69 89 78 84 80 80     ..........i.x...
     292:	80 80 80 84 78 12 69 89 f0 88 84 84 84 84 84 88     ....x.i.........
     2a2:	f0 12 69 89 fc 80 80 80 f0 80 80 80 fc 12 69 89     ..i...........i.
     2b2:	fc 80 80 80 f0 80 80 80 80 12 69 89 78 84 80 80     ..........i.x...
     2c2:	80 9c 84 8c 74 12 69 89 84 84 84 84 fc 84 84 84     ....t.i.........
     2d2:	84 12 59 89 f8 20 20 20 20 20 20 20 f8 12 79 89     ..Y..       ..y.
     2e2:	3e 08 08 08 08 08 08 88 70 12 69 89 84 88 90 a0     >.......p.i.....
     2f2:	c0 a0 90 88 84 12 69 89 80 80 80 80 80 80 80 80     ......i.........
     302:	fc 02 79 89 82 82 c6 aa 92 92 82 82 82 12 69 89     ..y...........i.
     312:	84 84 c4 a4 94 8c 84 84 84 12 69 89 78 84 84 84     ..........i.x...
     322:	84 84 84 84 78 12 69 89 f8 84 84 84 f8 80 80 80     ....x.i.........
     332:	80 11 6a 8a 78 84 84 84 84 84 a4 94 78 04 12 69     ..j.x.......x..i
     342:	89 f8 84 84 84 f8 a0 90 88 84 12 69 89 78 84 80     ...........i.x..
     352:	80 78 04 04 84 78 02 79 89 fe 10 10 10 10 10 10     .x...x.y........
     362:	10 10 12 69 89 84 84 84 84 84 84 84 84 78 02 79     ...i.........x.y
     372:	89 82 82 44 44 44 28 28 28 10 02 79 89 82 82 82     ...DDD(((..y....
     382:	82 92 92 92 aa 44 02 79 89 82 82 44 28 10 28 44     .....D.y...D(.(D
     392:	82 82 02 79 89 82 82 44 28 10 10 10 10 10 12 69     ...y...D(......i
     3a2:	89 fc 04 08 10 20 40 80 80 fc 22 49 89 f0 80 80     ..... @..."I....
     3b2:	80 80 80 80 80 f0 02 79 89 80 80 40 20 10 08 04     .......y...@ ...
     3c2:	02 02 12 49 89 f0 10 10 10 10 10 10 10 f0 18 53     ...I...........S
     3d2:	83 20 50 88 01 71 81 fe 3a 22 82 80 40 12 66 86     . P..q..:"..@.f.
     3e2:	78 04 7c 84 8c 74 12 69 89 80 80 80 b8 c4 84 84     x.|..t.i........
     3f2:	c4 b8 12 66 86 78 84 80 80 84 78 12 69 89 04 04     ...f.x....x.i...
     402:	04 74 8c 84 84 8c 74 12 66 86 78 84 fc 80 84 78     .t....t.f.x....x
     412:	12 69 89 38 44 40 40 f8 40 40 40 40 10 68 88 74     .i.8D@@.@@@@.h.t
     422:	88 88 70 80 78 84 78 12 69 89 80 80 80 b8 c4 84     ..p.x.x.i.......
     432:	84 84 84 12 58 88 20 00 60 20 20 20 20 f8 10 5a     ....X. .`    ..Z
     442:	8a 08 00 18 08 08 08 08 88 88 70 12 69 89 80 80     ..........p.i...
     452:	80 88 90 e0 90 88 84 12 59 89 60 20 20 20 20 20     ........Y.`     
     462:	20 20 f8 02 76 86 ec 92 92 92 92 82 12 66 86 b8       ..v........f..
     472:	c4 84 84 84 84 12 66 86 78 84 84 84 84 78 10 68     ......f.x....x.h
     482:	88 b8 c4 84 c4 b8 80 80 80 10 68 88 74 8c 84 8c     ..........h.t...
     492:	74 04 04 04 12 66 86 b8 44 40 40 40 40 12 66 86     t....f..D@@@@.f.
     4a2:	78 84 60 18 84 78 12 68 88 40 40 f8 40 40 40 44     x.`..x.h.@@.@@@D
     4b2:	38 12 66 86 88 88 88 88 88 74 12 56 86 88 88 88     8.f......t.V....
     4c2:	50 50 20 02 76 86 82 82 92 92 aa 44 12 66 86 84     PP .v......D.f..
     4d2:	48 30 30 48 84 10 68 88 84 84 84 8c 74 04 84 78     H00H..h.....t..x
     4e2:	12 66 86 fc 08 10 20 40 fc 22 59 89 38 40 40 20     .f.... @."Y.8@@ 
     4f2:	c0 20 40 40 38 32 19 89 80 80 80 80 80 80 80 80     . @@82..........
     502:	80 12 59 89 e0 10 10 20 18 20 10 10 e0 18 53 83     ..Y.... . ....S.
     512:	48 a8 90 ff ff ff ff ff ff ff ff ff ff ff ff ff     H...............
     522:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     532:	ff ff ff ff 0d 00 80 32 19 89 80 00 80 80 80 80     .......2........
     542:	80 80 80 13 58 88 20 70 a8 a0 a0 a8 70 20 02 79     ....X. p....p .y
     552:	89 1c 22 20 70 20 20 20 62 dc 13 66 86 84 78 48     .." p   b..f..xH
     562:	48 78 84 02 79 89 82 82 44 28 7c 10 7c 10 10 32     Hx..y...D(|.|..2
     572:	19 89 80 80 80 80 00 80 80 80 80 22 4a 8a 60 90     ..........."J.`.
     582:	80 60 90 90 60 10 90 60 2a 42 82 90 90 03 79 89     .`..`..`*B....y.
     592:	38 44 92 aa a2 aa 92 44 38 14 57 87 70 08 78 88     8D.....D8.W.p.x.
     5a2:	78 00 f8 03 77 87 12 24 48 90 48 24 12 13 64 84     x...w..$H.H$..d.
     5b2:	fc 04 04 04 26 41 81 f0 03 79 89 38 44 92 aa aa     ....&A...y.8D...
     5c2:	b2 aa 44 38 1a 61 81 fc 27 44 84 60 90 90 60 13     ..D8.a..'D.`..`.
     5d2:	57 87 20 20 f8 20 20 00 f8 16 46 86 60 90 10 60     W.  .  ...F.`..`
     5e2:	80 f0 16 46 86 60 90 20 10 90 60 3a 22 82 40 80     ...F.`. ..`:".@.
     5f2:	11 67 87 84 84 84 84 cc b4 80 12 69 89 7c e8 e8     .g.........i.|..
     602:	e8 68 28 28 28 28 36 21 81 c0 30 22 82 40 c0 16     .h((((6!..0".@..
     612:	36 86 40 c0 40 40 40 e0 15 46 86 60 90 90 60 00     6.@.@@@..F.`..`.
     622:	f0 03 77 87 90 48 24 12 24 48 90 02 7a 8a 40 c0     ..w..H$.$H..z.@.
     632:	40 40 42 e6 0a 12 1a 06 02 7a 8a 40 c0 40 40 4c     @@B......z.@.@@L
     642:	f2 02 0c 10 1e 02 7a 8a 60 90 20 10 92 66 0a 12     ......z.`. ..f..
     652:	1a 06 12 69 89 20 00 20 20 40 80 84 84 78 12 6a     ...i. .  @...x.j
     662:	8a 20 10 00 30 48 84 84 fc 84 84 12 6a 8a 10 20     . ..0H......j.. 
     672:	00 30 48 84 84 fc 84 84 12 6a 8a 30 48 00 30 48     .0H......j.0H.0H
     682:	84 84 fc 84 84 12 6a 8a 64 98 00 30 48 84 84 fc     ......j.d..0H...
     692:	84 84 12 6a 8a 48 48 00 30 48 84 84 fc 84 84 12     ...j.HH.0H......
     6a2:	6a 8a 30 48 30 30 48 84 84 fc 84 84 02 79 89 6e     j.0H00H......y.n
     6b2:	90 90 90 9c f0 90 90 9e 10 6b 8b 78 84 80 80 80     .........k.x....
     6c2:	80 80 84 78 10 20 12 6a 8a 20 10 00 fc 80 80 f0     ...x. .j. ......
     6d2:	80 80 fc 12 6a 8a 10 20 00 fc 80 80 f0 80 80 fc     ....j.. ........
     6e2:	12 6a 8a 30 48 00 fc 80 80 f0 80 80 fc 12 6a 8a     .j.0H.........j.
     6f2:	48 48 00 fc 80 80 f0 80 80 fc 12 5a 8a 40 20 00     HH.........Z.@ .
     702:	f8 20 20 20 20 20 f8 12 5a 8a 10 20 00 f8 20 20     .     ..Z.. ..  
     712:	20 20 20 f8 12 5a 8a 30 48 00 f8 20 20 20 20 20        ..Z.0H..     
     722:	f8 12 5a 8a 88 88 00 f8 20 20 20 20 20 f8 02 79     ..Z.....     ..y
     732:	89 78 44 42 42 e2 42 42 44 78 02 7a 8a 64 98 00     .xDBB.BBDx.z.d..
     742:	82 c2 a2 92 8a 86 82 02 7a 8a 20 10 00 7c 82 82     ........z. ..|..
     752:	82 82 82 7c 02 7a 8a 08 10 00 7c 82 82 82 82 82     ...|.z....|.....
     762:	7c 02 7a 8a 18 24 00 7c 82 82 82 82 82 7c 02 7a     |.z..$.|.....|.z
     772:	8a 64 98 00 7c 82 82 82 82 82 7c 02 7a 8a 44 44     .d..|.....|.z.DD
     782:	00 7c 82 82 82 82 82 7c 13 66 86 84 48 30 30 48     .|.....|.f..H00H
     792:	84 11 6b 8b 04 78 8c 94 94 a4 a4 a4 c4 78 80 12     ..k..x.......x..
     7a2:	6a 8a 40 20 00 84 84 84 84 84 84 78 12 6a 8a 10     j.@ .......x.j..
     7b2:	20 00 84 84 84 84 84 84 78 12 6a 8a 30 48 00 84      .......x.j.0H..
     7c2:	84 84 84 84 84 78 12 6a 8a 48 48 00 84 84 84 84     .....x.j.HH.....
     7d2:	84 84 78 12 5a 8a 10 20 00 88 88 50 20 20 20 20     ..x.Z.. ...P    
     7e2:	12 69 89 80 f8 84 84 84 f8 80 80 80 12 69 89 70     .i...........i.p
     7f2:	88 88 90 a0 98 84 84 b8 12 69 89 20 10 00 78 04     .........i. ..x.
     802:	7c 84 8c 74 12 69 89 08 10 00 78 04 7c 84 8c 74     |..t.i....x.|..t
     812:	12 69 89 30 48 00 78 04 7c 84 8c 74 12 69 89 64     .i.0H.x.|..t.i.d
     822:	98 00 78 04 7c 84 8c 74 12 69 89 48 48 00 78 04     ..x.|..t.i.HH.x.
     832:	7c 84 8c 74 12 6a 8a 30 48 30 00 78 04 7c 84 8c     |..t.j.0H0.x.|..
     842:	74 02 76 86 6c 12 7c 90 92 6c 10 68 88 78 84 80     t.v.l.|..l.h.x..
     852:	80 84 78 10 20 12 69 89 20 10 00 78 84 fc 80 84     ..x. .i. ..x....
     862:	78 12 69 89 10 20 00 78 84 fc 80 84 78 12 69 89     x.i.. .x....x.i.
     872:	30 48 00 78 84 fc 80 84 78 12 69 89 48 48 00 78     0H.x....x.i.HH.x
     882:	84 fc 80 84 78 12 59 89 40 20 00 60 20 20 20 20     ....x.Y.@ .`    
     892:	f8 12 59 89 20 40 00 60 20 20 20 20 f8 12 59 89     ..Y. @.`    ..Y.
     8a2:	60 90 00 60 20 20 20 20 f8 12 59 89 90 90 00 60     `..`    ..Y....`
     8b2:	20 20 20 20 f8 12 6a 8a 48 30 50 08 78 84 84 84         ..j.H0P.x...
     8c2:	84 78 12 69 89 64 98 00 b8 c4 84 84 84 84 12 69     .x.i.d.........i
     8d2:	89 40 20 00 78 84 84 84 84 78 12 69 89 10 20 00     .@ .x....x.i.. .
     8e2:	78 84 84 84 84 78 12 69 89 30 48 00 78 84 84 84     x....x.i.0H.x...
     8f2:	84 78 12 69 89 64 98 00 78 84 84 84 84 78 12 69     .x.i.d..x....x.i
     902:	89 48 48 00 78 84 84 84 84 78 13 57 87 20 20 00     .HH.x....x.W.  .
     912:	f8 00 20 20 11 68 88 04 78 8c 94 a4 c4 78 80 12     ..  .h..x....x..
     922:	69 89 40 20 00 88 88 88 88 88 74 12 69 89 10 20     i.@ ......t.i.. 
     932:	00 88 88 88 88 88 74 12 69 89 30 48 00 88 88 88     ......t.i.0H....
     942:	88 88 74 12 69 89 50 50 00 88 88 88 88 88 74 10     ..t.i.PP......t.
     952:	6b 8b 10 20 00 84 84 84 8c 74 04 84 78 10 6a 8a     k.. .....t..x.j.
     962:	80 80 b8 c4 84 84 c4 b8 80 80 10 6b 8b 48 48 00     ...........k.HH.
     972:	84 84 84 8c 74 04 84 78                             ....t..x

0000097a <u8g_font_4x6>:
     97a:	01 04 06 00 ff 05 01 03 01 fa 20 ff ff 05 ff 05     .......... .....
     98a:	ff 07 00 40 12 15 45 80 80 80 00 80 05 32 42 a0     ...@..E......2B.
     99a:	a0 02 45 45 a0 f0 a0 f0 a0 01 36 46 40 e0 c0 20     ..EE......6F@.. 
     9aa:	e0 40 02 35 45 80 20 40 80 20 02 45 45 40 a0 40     .@.5E. @. .EE@.@
     9ba:	a0 50 15 12 42 80 80 11 26 46 40 80 80 80 80 40     .P..B...&F@....@
     9ca:	01 26 46 80 40 40 40 40 80 02 35 45 a0 40 e0 40     .&F.@@@@..5E.@.@
     9da:	a0 02 35 45 40 40 e0 40 40 01 22 42 40 80 04 31     ..5E@@.@@."B@..1
     9ea:	41 e0 12 11 41 80 02 35 45 20 20 40 80 80 02 35     A...A..5E  @...5
     9fa:	45 40 a0 e0 a0 40 02 35 45 40 c0 40 40 e0 02 35     E@...@.5E@.@@..5
     a0a:	45 40 a0 20 40 e0 02 35 45 e0 20 40 20 c0 02 35     E@. @..5E. @ ..5
     a1a:	45 a0 a0 e0 20 20 02 35 45 e0 80 c0 20 c0 02 35     E...  .5E... ..5
     a2a:	45 60 80 c0 a0 40 02 35 45 e0 20 40 80 80 02 35     E`...@.5E. @...5
     a3a:	45 60 a0 40 a0 c0 02 35 45 40 a0 60 20 c0 12 14     E`.@...5E@.` ...
     a4a:	44 80 00 00 80 01 25 45 40 00 00 40 80 02 35 45     D.....%E@..@..5E
     a5a:	20 40 80 40 20 03 33 43 e0 00 e0 02 35 45 80 40      @.@ .3C....5E.@
     a6a:	20 40 80 02 35 45 c0 20 40 00 40 02 35 45 60 a0      @..5E. @.@.5E`.
     a7a:	a0 80 60 02 35 45 40 a0 e0 a0 a0 02 35 45 c0 a0     ..`.5E@.....5E..
     a8a:	c0 a0 c0 02 35 45 40 a0 80 a0 40 02 35 45 c0 a0     ....5E@...@.5E..
     a9a:	a0 a0 c0 02 35 45 e0 80 c0 80 e0 02 35 45 e0 80     ....5E......5E..
     aaa:	c0 80 80 02 35 45 60 80 a0 a0 60 02 35 45 a0 a0     ....5E`...`.5E..
     aba:	e0 a0 a0 02 35 45 e0 40 40 40 e0 02 35 45 20 20     ....5E.@@@..5E  
     aca:	20 a0 40 02 35 45 a0 a0 c0 a0 a0 02 35 45 80 80      .@.5E......5E..
     ada:	80 80 e0 02 35 45 a0 e0 e0 a0 a0 02 35 45 20 a0     ....5E......5E .
     aea:	e0 a0 80 02 35 45 40 a0 a0 a0 40 02 35 45 c0 a0     ....5E@...@.5E..
     afa:	c0 80 80 01 36 46 40 a0 a0 a0 40 20 02 35 45 c0     ....6F@...@ .5E.
     b0a:	a0 c0 a0 a0 02 35 45 60 80 40 20 c0 02 35 45 e0     .....5E`.@ ..5E.
     b1a:	40 40 40 40 02 35 45 a0 a0 a0 a0 e0 02 35 45 a0     @@@@.5E......5E.
     b2a:	a0 a0 e0 40 02 35 45 a0 a0 e0 e0 a0 02 35 45 a0     ...@.5E......5E.
     b3a:	a0 40 a0 a0 02 35 45 a0 a0 40 40 40 02 35 45 e0     .@...5E..@@@.5E.
     b4a:	20 40 80 e0 12 25 45 c0 80 80 80 c0 02 35 45 80      @...%E......5E.
     b5a:	80 40 20 20 02 25 45 c0 40 40 40 c0 05 32 42 40     .@  .%E.@@@..2B@
     b6a:	a0 01 31 41 e0 15 22 42 80 40 02 34 44 60 a0 a0     ..1A.."B.@.4D`..
     b7a:	60 02 35 45 80 c0 a0 a0 c0 02 34 44 60 80 80 60     `.5E......4D`..`
     b8a:	02 35 45 20 60 a0 a0 60 02 34 44 40 a0 c0 60 02     .5E `..`.4D@..`.
     b9a:	35 45 20 40 e0 40 40 01 35 45 60 a0 60 20 c0 02     5E @.@@.5E`.` ..
     baa:	35 45 80 c0 a0 a0 a0 02 35 45 40 00 c0 40 e0 01     5E......5E@..@..
     bba:	36 46 20 00 20 20 20 c0 02 35 45 80 a0 c0 a0 a0     6F .   ..5E.....
     bca:	02 35 45 c0 40 40 40 e0 02 34 44 a0 e0 a0 a0 02     .5E.@@@..4D.....
     bda:	34 44 c0 a0 a0 a0 02 34 44 40 a0 a0 40 01 35 45     4D.....4D@..@.5E
     bea:	c0 a0 c0 80 80 01 35 45 60 a0 a0 60 20 02 34 44     ......5E`..` .4D
     bfa:	a0 c0 80 80 02 34 44 60 c0 20 c0 02 35 45 40 e0     .....4D`. ..5E@.
     c0a:	40 40 20 02 34 44 a0 a0 a0 60 02 34 44 a0 a0 a0     @@ .4D...`.4D...
     c1a:	40 02 34 44 a0 a0 e0 a0 02 34 44 a0 40 40 a0 01     @.4D.....4D.@@..
     c2a:	35 45 a0 a0 60 20 c0 02 34 44 e0 20 40 e0 01 36     5E..` ..4D. @..6
     c3a:	46 20 40 c0 40 40 20 12 15 45 80 80 80 80 80 01     F @.@@ ..E......
     c4a:	36 46 80 40 60 40 40 80 05 42 42 50 a0 ff ff ff     6F.@`@@..BBP....
     c5a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c6a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 07 00     ................
     c7a:	40 12 15 45 80 00 80 80 80 02 35 45 40 e0 80 e0     @..E......5E@...
     c8a:	40 02 35 45 20 40 60 40 a0 02 44 44 90 60 60 90     @.5E @`@..DD.``.
     c9a:	02 35 45 a0 40 e0 40 40 12 15 45 80 80 00 80 80     .5E.@.@@..E.....
     caa:	01 36 46 60 c0 a0 60 20 c0 06 31 41 a0 01 46 46     .6F`..` ..1A..FF
     cba:	60 90 d0 d0 90 60 02 35 45 60 a0 60 00 e0 03 43     `....`.5E`.`...C
     cca:	43 50 a0 50 03 32 42 e0 20 04 31 41 e0 03 44 44     CP.P.2B. .1A..DD
     cda:	60 f0 d0 60 06 31 41 e0 04 33 43 40 a0 40 02 35     `..`.1A..3C@.@.5
     cea:	45 40 e0 40 00 e0 03 24 44 c0 40 80 c0 02 25 45     E@.@...$D.@...%E
     cfa:	c0 40 80 40 80 15 22 42 40 80 01 35 45 a0 a0 a0     .@.@.."B@..5E...
     d0a:	c0 80 02 45 45 70 d0 d0 50 50 14 11 41 80 12 22     ...EEp..PP..A.."
     d1a:	42 40 80 03 24 44 40 c0 40 40 02 35 45 40 a0 40     B@..$D@.@@.5E@.@
     d2a:	00 e0 03 43 43 a0 50 a0 01 46 46 80 80 80 50 70     ...CC.P..FF...Pp
     d3a:	10 01 46 46 80 80 b0 10 20 30 01 46 46 c0 40 80     ..FF.... 0.FF.@.
     d4a:	50 b0 10 02 35 45 40 00 40 80 60 02 35 45 80 40     P...5E@.@.`.5E.@
     d5a:	a0 e0 a0 02 35 45 20 40 a0 e0 a0 02 35 45 c0 40     ....5E @....5E.@
     d6a:	a0 e0 a0 02 35 45 60 c0 a0 e0 a0 02 35 45 a0 40     ....5E`.....5E.@
     d7a:	a0 e0 a0 02 35 45 40 40 a0 e0 a0 02 45 45 70 a0     ....5E@@....EEp.
     d8a:	f0 a0 b0 01 36 46 40 a0 80 a0 40 80 02 35 45 80     ....6F@...@..5E.
     d9a:	e0 c0 80 e0 02 35 45 20 e0 c0 80 e0 02 35 45 60     .....5E .....5E`
     daa:	e0 c0 80 e0 02 35 45 a0 e0 c0 80 e0 02 35 45 80     .....5E......5E.
     dba:	e0 40 40 e0 02 35 45 20 e0 40 40 e0 02 35 45 40     .@@..5E .@@..5E@
     dca:	e0 40 40 e0 02 35 45 a0 40 40 40 e0 02 45 45 e0     .@@..5E.@@@..EE.
     dda:	50 d0 50 e0 02 45 45 50 a0 e0 e0 a0 02 35 45 80     P.P..EEP.....5E.
     dea:	40 a0 a0 40 02 35 45 20 40 a0 a0 40 02 35 45 40     @..@.5E @..@.5E@
     dfa:	40 a0 a0 40 02 45 45 70 e0 a0 a0 40 02 35 45 a0     @..@.EEp...@.5E.
     e0a:	40 a0 a0 40 03 33 43 a0 40 a0 02 35 45 60 a0 e0     @..@.3C.@..5E`..
     e1a:	a0 c0 02 35 45 80 40 a0 a0 e0 02 35 45 20 40 a0     ...5E.@....5E @.
     e2a:	a0 e0 02 35 45 40 00 a0 a0 e0 02 35 45 a0 00 a0     ...5E@.....5E...
     e3a:	a0 e0 02 35 45 20 00 a0 40 40 02 35 45 80 c0 a0     ...5E ..@@.5E...
     e4a:	c0 80 01 36 46 40 a0 c0 a0 e0 80 02 35 45 80 40     ...6F@......5E.@
     e5a:	60 a0 60 02 35 45 20 40 60 a0 60 02 35 45 60 00     `.`.5E @`.`.5E`.
     e6a:	60 a0 60 02 45 45 50 a0 60 a0 60 02 35 45 a0 00     `.`.EEP.`.`.5E..
     e7a:	60 a0 60 02 35 45 40 00 60 a0 60 02 44 44 70 b0     `.`.5E@.`.`.DDp.
     e8a:	a0 70 01 35 45 40 a0 80 60 40 02 35 45 80 40 a0     .p.5E@..`@.5E.@.
     e9a:	c0 60 02 35 45 20 40 a0 c0 60 02 35 45 c0 40 a0     .`.5E @..`.5E.@.
     eaa:	c0 60 02 35 45 a0 40 a0 c0 60 02 35 45 80 40 40     .`.5E.@..`.5E.@@
     eba:	40 e0 02 35 45 20 c0 40 40 e0 02 35 45 40 a0 40     @..5E .@@..5E@.@
     eca:	40 e0 02 35 45 a0 00 c0 40 e0 02 35 45 a0 40 60     @..5E...@..5E.@`
     eda:	a0 40 02 45 45 50 a0 c0 a0 a0 02 35 45 80 40 40     .@.EEP.....5E.@@
     eea:	a0 40 02 35 45 20 40 40 a0 40 02 35 45 40 00 40     .@.5E @@.@.5E@.@
     efa:	a0 40 02 35 45 e0 00 40 a0 40 02 35 45 a0 00 40     .@.5E..@.@.5E..@
     f0a:	a0 40 02 35 45 40 00 e0 00 40 02 34 44 60 a0 a0     .@.5E@...@.4D`..
     f1a:	c0 02 35 45 80 40 a0 a0 60 02 35 45 20 40 a0 a0     ..5E.@..`.5E @..
     f2a:	60 02 35 45 40 00 a0 a0 60 02 35 45 a0 00 a0 a0     `.5E@...`.5E....
     f3a:	60 01 36 46 20 40 a0 e0 20 c0 01 36 46 80 80 c0     `.6F @.. ..6F...
     f4a:	a0 c0 80 01 36 46 a0 00 a0 e0 20 c0                 ....6F.... .

00000f56 <__ctors_end>:
     f56:	11 24       	eor	r1, r1
     f58:	1f be       	out	0x3f, r1	; 63
     f5a:	cf ef       	ldi	r28, 0xFF	; 255
     f5c:	d8 e0       	ldi	r29, 0x08	; 8
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	cd bf       	out	0x3d, r28	; 61

00000f62 <__do_copy_data>:
     f62:	11 e0       	ldi	r17, 0x01	; 1
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b1 e0       	ldi	r27, 0x01	; 1
     f68:	e2 ee       	ldi	r30, 0xE2	; 226
     f6a:	f0 e2       	ldi	r31, 0x20	; 32
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <__do_copy_data+0x10>
     f6e:	05 90       	lpm	r0, Z+
     f70:	0d 92       	st	X+, r0
     f72:	ae 33       	cpi	r26, 0x3E	; 62
     f74:	b1 07       	cpc	r27, r17
     f76:	d9 f7       	brne	.-10     	; 0xf6e <__do_copy_data+0xc>

00000f78 <__do_clear_bss>:
     f78:	22 e0       	ldi	r18, 0x02	; 2
     f7a:	ae e3       	ldi	r26, 0x3E	; 62
     f7c:	b1 e0       	ldi	r27, 0x01	; 1
     f7e:	01 c0       	rjmp	.+2      	; 0xf82 <.do_clear_bss_start>

00000f80 <.do_clear_bss_loop>:
     f80:	1d 92       	st	X+, r1

00000f82 <.do_clear_bss_start>:
     f82:	af 32       	cpi	r26, 0x2F	; 47
     f84:	b2 07       	cpc	r27, r18
     f86:	e1 f7       	brne	.-8      	; 0xf80 <.do_clear_bss_loop>
     f88:	0e 94 25 10 	call	0x204a	; 0x204a <main>
     f8c:	0c 94 6f 10 	jmp	0x20de	; 0x20de <_exit>

00000f90 <__bad_interrupt>:
     f90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000f94 <ADC_init>:
	//Sid 237
	
	/*AVcc with external capacitor at AREF pin (page 248) Change the ADLAR bit to left 
	or right adjust the pin. Write a one to leftadjust.If we change adc channel, the mux
	must be set as well.*/
	ADMUX = (1<<REFS0);
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//Enables the ADC
	ADCSRA = (1<<ADEN);
     f9a:	ea e7       	ldi	r30, 0x7A	; 122
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 e8       	ldi	r24, 0x80	; 128
     fa0:	80 83       	st	Z, r24
	
	//Set the prescaler to 16 for a 500 KHz sample frequency
	ADCSRA |= (0<<ADPS0) |(0<<ADPS1) | (1<<ADPS2);
     fa2:	80 81       	ld	r24, Z
     fa4:	84 60       	ori	r24, 0x04	; 4
     fa6:	80 83       	st	Z, r24
     fa8:	08 95       	ret

00000faa <welcome_message>:
    draw_logo(0);
}

void welcome_message(void){

    u8g_FirstPage(&oled_display);
     faa:	88 ef       	ldi	r24, 0xF8	; 248
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <u8g_FirstPage>
    do
    {
        //Screen = 128x64
        u8g_DrawHLine(&oled_display, 20, 17, 88);
     fb2:	28 e5       	ldi	r18, 0x58	; 88
     fb4:	41 e1       	ldi	r20, 0x11	; 17
     fb6:	64 e1       	ldi	r22, 0x14	; 20
     fb8:	88 ef       	ldi	r24, 0xF8	; 248
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <u8g_DrawHLine>

        u8g_SetFont(&oled_display, u8g_font_8x13);
     fc0:	62 e1       	ldi	r22, 0x12	; 18
     fc2:	71 e0       	ldi	r23, 0x01	; 1
     fc4:	88 ef       	ldi	r24, 0xF8	; 248
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <u8g_SetFont>
        u8g_DrawStr(&oled_display, 36, 32, "V-Sense");
     fcc:	24 e1       	ldi	r18, 0x14	; 20
     fce:	31 e0       	ldi	r19, 0x01	; 1
     fd0:	40 e2       	ldi	r20, 0x20	; 32
     fd2:	64 e2       	ldi	r22, 0x24	; 36
     fd4:	88 ef       	ldi	r24, 0xF8	; 248
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <u8g_DrawStr>

        u8g_DrawHLine(&oled_display, 20, 38, 88);
     fdc:	28 e5       	ldi	r18, 0x58	; 88
     fde:	46 e2       	ldi	r20, 0x26	; 38
     fe0:	64 e1       	ldi	r22, 0x14	; 20
     fe2:	88 ef       	ldi	r24, 0xF8	; 248
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <u8g_DrawHLine>
        
        u8g_SetFont(&oled_display, u8g_font_4x6);
     fea:	6a e7       	ldi	r22, 0x7A	; 122
     fec:	79 e0       	ldi	r23, 0x09	; 9
     fee:	88 ef       	ldi	r24, 0xF8	; 248
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <u8g_SetFont>
        u8g_DrawStr(&oled_display, 50, 55, "By: Team Embedded");
     ff6:	2c e1       	ldi	r18, 0x1C	; 28
     ff8:	31 e0       	ldi	r19, 0x01	; 1
     ffa:	47 e3       	ldi	r20, 0x37	; 55
     ffc:	62 e3       	ldi	r22, 0x32	; 50
     ffe:	88 ef       	ldi	r24, 0xF8	; 248
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <u8g_DrawStr>

    } while ( u8g_NextPage(&oled_display) );
    1006:	88 ef       	ldi	r24, 0xF8	; 248
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <u8g_NextPage>
    100e:	81 11       	cpse	r24, r1
    1010:	d0 cf       	rjmp	.-96     	; 0xfb2 <welcome_message+0x8>

}
    1012:	08 95       	ret

00001014 <OLED_Init>:


 uint8_t OLED_Init(void){

    // Setting transfer speed
    CLKPR = 0x80;
    1014:	e1 e6       	ldi	r30, 0x61	; 97
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	80 83       	st	Z, r24
    CLKPR = 0x00;
    101c:	10 82       	st	Z, r1

    // Initialize I2C and OLED display
    u8g_InitI2C(&oled_display, &u8g_dev_ssd1306_128x64_i2c, U8G_I2C_OPT_NONE);
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	71 e0       	ldi	r23, 0x01	; 1
    1024:	88 ef       	ldi	r24, 0xF8	; 248
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <u8g_InitI2C>

    welcome_message();
    102c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <welcome_message>

    return 1;
 }
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	08 95       	ret

00001034 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1034:	0f 93       	push	r16
    1036:	fc 01       	movw	r30, r24
    1038:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    103a:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    103c:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    103e:	96 a9       	ldd	r25, Z+54	; 0x36
    1040:	94 17       	cp	r25, r20
    1042:	38 f0       	brcs	.+14     	; 0x1052 <u8g_IsBBXIntersection+0x1e>
  {
    if ( v1 >= a0 )
    1044:	08 17       	cp	r16, r24
    1046:	68 f4       	brcc	.+26     	; 0x1062 <u8g_IsBBXIntersection+0x2e>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	04 17       	cp	r16, r20
    104c:	40 f0       	brcs	.+16     	; 0x105e <u8g_IsBBXIntersection+0x2a>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	06 c0       	rjmp	.+12     	; 0x105e <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1052:	08 17       	cp	r16, r24
    1054:	d0 f0       	brcs	.+52     	; 0x108a <u8g_IsBBXIntersection+0x56>
    {
      if ( v0 > v1 )
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	04 17       	cp	r16, r20
    105a:	08 f0       	brcs	.+2      	; 0x105e <u8g_IsBBXIntersection+0x2a>
    105c:	80 e0       	ldi	r24, 0x00	; 0
{
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    105e:	88 23       	and	r24, r24
    1060:	c9 f0       	breq	.+50     	; 0x1094 <u8g_IsBBXIntersection+0x60>
    1062:	21 50       	subi	r18, 0x01	; 1
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1064:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1066:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1068:	95 a9       	ldd	r25, Z+53	; 0x35
    106a:	96 17       	cp	r25, r22
    106c:	38 f0       	brcs	.+14     	; 0x107c <u8g_IsBBXIntersection+0x48>
  {
    if ( v1 >= a0 )
    106e:	28 17       	cp	r18, r24
    1070:	70 f4       	brcc	.+28     	; 0x108e <u8g_IsBBXIntersection+0x5a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	26 17       	cp	r18, r22
    1076:	70 f0       	brcs	.+28     	; 0x1094 <u8g_IsBBXIntersection+0x60>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	0c c0       	rjmp	.+24     	; 0x1094 <u8g_IsBBXIntersection+0x60>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    107c:	28 17       	cp	r18, r24
    107e:	48 f0       	brcs	.+18     	; 0x1092 <u8g_IsBBXIntersection+0x5e>
    {
      if ( v0 > v1 )
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	26 17       	cp	r18, r22
    1084:	38 f0       	brcs	.+14     	; 0x1094 <u8g_IsBBXIntersection+0x60>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	05 c0       	rjmp	.+10     	; 0x1094 <u8g_IsBBXIntersection+0x60>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <u8g_IsBBXIntersection+0x60>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	01 c0       	rjmp	.+2      	; 0x1094 <u8g_IsBBXIntersection+0x60>
	return 0;
      }
    }
    else
    {
      return 0;
    1092:	80 e0       	ldi	r24, 0x00	; 0
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1094:	0f 91       	pop	r16
    1096:	08 95       	ret

00001098 <u8g_InitCom>:
}

uint8_t u8g_WriteSequenceP(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, const uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ_P, cnt, (void *)seq);
}
    1098:	db 01       	movw	r26, r22
    109a:	14 96       	adiw	r26, 0x04	; 4
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	15 97       	sbiw	r26, 0x05	; 5
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	09 95       	icall
    10aa:	08 95       	ret

000010ac <u8g_SetChipSelect>:
    10ac:	db 01       	movw	r26, r22
    10ae:	14 96       	adiw	r26, 0x04	; 4
    10b0:	ed 91       	ld	r30, X+
    10b2:	fc 91       	ld	r31, X
    10b4:	15 97       	sbiw	r26, 0x05	; 5
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	09 95       	icall
    10be:	08 95       	ret

000010c0 <u8g_SetResetLow>:
    10c0:	db 01       	movw	r26, r22
    10c2:	14 96       	adiw	r26, 0x04	; 4
    10c4:	ed 91       	ld	r30, X+
    10c6:	fc 91       	ld	r31, X
    10c8:	15 97       	sbiw	r26, 0x05	; 5
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	64 e0       	ldi	r22, 0x04	; 4
    10d2:	09 95       	icall
    10d4:	08 95       	ret

000010d6 <u8g_SetResetHigh>:
    10d6:	db 01       	movw	r26, r22
    10d8:	14 96       	adiw	r26, 0x04	; 4
    10da:	ed 91       	ld	r30, X+
    10dc:	fc 91       	ld	r31, X
    10de:	15 97       	sbiw	r26, 0x05	; 5
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	64 e0       	ldi	r22, 0x04	; 4
    10e8:	09 95       	icall
    10ea:	08 95       	ret

000010ec <u8g_SetAddress>:
    10ec:	db 01       	movw	r26, r22
    10ee:	14 96       	adiw	r26, 0x04	; 4
    10f0:	ed 91       	ld	r30, X+
    10f2:	fc 91       	ld	r31, X
    10f4:	15 97       	sbiw	r26, 0x05	; 5
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	62 e0       	ldi	r22, 0x02	; 2
    10fc:	09 95       	icall
    10fe:	08 95       	ret

00001100 <u8g_WriteByte>:
    1100:	db 01       	movw	r26, r22
    1102:	14 96       	adiw	r26, 0x04	; 4
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	15 97       	sbiw	r26, 0x05	; 5
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	65 e0       	ldi	r22, 0x05	; 5
    1110:	09 95       	icall
    1112:	08 95       	ret

00001114 <u8g_WriteSequence>:
    1114:	db 01       	movw	r26, r22
    1116:	14 96       	adiw	r26, 0x04	; 4
    1118:	ed 91       	ld	r30, X+
    111a:	fc 91       	ld	r31, X
    111c:	15 97       	sbiw	r26, 0x05	; 5
    111e:	66 e0       	ldi	r22, 0x06	; 6
    1120:	09 95       	icall
    1122:	08 95       	ret

00001124 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1124:	af 92       	push	r10
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	6c 01       	movw	r12, r24
    113a:	7b 01       	movw	r14, r22
    113c:	8a 01       	movw	r16, r20
  uint8_t is_escape = 0;
    113e:	d0 e0       	ldi	r29, 0x00	; 0
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1140:	b1 2c       	mov	r11, r1
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1142:	aa 24       	eor	r10, r10
    1144:	a3 94       	inc	r10
{
  uint8_t is_escape = 0;
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1146:	f8 01       	movw	r30, r16
    1148:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    114a:	d1 11       	cpse	r29, r1
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <u8g_WriteEscSeqP+0x40>
    {
      if ( value != 255 )
    114e:	cf 3f       	cpi	r28, 0xFF	; 255
    1150:	09 f4       	brne	.+2      	; 0x1154 <u8g_WriteEscSeqP+0x30>
    1152:	4a c0       	rjmp	.+148    	; 0x11e8 <u8g_WriteEscSeqP+0xc4>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1154:	4c 2f       	mov	r20, r28
    1156:	b7 01       	movw	r22, r14
    1158:	c6 01       	movw	r24, r12
    115a:	0e 94 80 08 	call	0x1100	; 0x1100 <u8g_WriteByte>
    115e:	81 11       	cpse	r24, r1
    1160:	48 c0       	rjmp	.+144    	; 0x11f2 <u8g_WriteEscSeqP+0xce>
    1162:	4b c0       	rjmp	.+150    	; 0x11fa <u8g_WriteEscSeqP+0xd6>
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1164:	cf 3f       	cpi	r28, 0xFF	; 255
    1166:	51 f4       	brne	.+20     	; 0x117c <u8g_WriteEscSeqP+0x58>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1168:	4f ef       	ldi	r20, 0xFF	; 255
    116a:	b7 01       	movw	r22, r14
    116c:	c6 01       	movw	r24, r12
    116e:	0e 94 80 08 	call	0x1100	; 0x1100 <u8g_WriteByte>
    1172:	88 23       	and	r24, r24
    1174:	09 f4       	brne	.+2      	; 0x1178 <u8g_WriteEscSeqP+0x54>
    1176:	41 c0       	rjmp	.+130    	; 0x11fa <u8g_WriteEscSeqP+0xd6>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1178:	db 2d       	mov	r29, r11
    117a:	3b c0       	rjmp	.+118    	; 0x11f2 <u8g_WriteEscSeqP+0xce>
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
    117c:	ce 3f       	cpi	r28, 0xFE	; 254
    117e:	e1 f1       	breq	.+120    	; 0x11f8 <u8g_WriteEscSeqP+0xd4>
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1180:	c0 3f       	cpi	r28, 0xF0	; 240
    1182:	a0 f5       	brcc	.+104    	; 0x11ec <u8g_WriteEscSeqP+0xc8>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1184:	c0 3e       	cpi	r28, 0xE0	; 224
    1186:	40 f0       	brcs	.+16     	; 0x1198 <u8g_WriteEscSeqP+0x74>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1188:	4c 2f       	mov	r20, r28
    118a:	4f 70       	andi	r20, 0x0F	; 15
    118c:	b7 01       	movw	r22, r14
    118e:	c6 01       	movw	r24, r12
    1190:	0e 94 76 08 	call	0x10ec	; 0x10ec <u8g_SetAddress>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1194:	db 2d       	mov	r29, r11
    1196:	2d c0       	rjmp	.+90     	; 0x11f2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xe0  )
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xd0 )
    1198:	c0 3d       	cpi	r28, 0xD0	; 208
    119a:	40 f0       	brcs	.+16     	; 0x11ac <u8g_WriteEscSeqP+0x88>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    119c:	4c 2f       	mov	r20, r28
    119e:	4f 70       	andi	r20, 0x0F	; 15
    11a0:	b7 01       	movw	r22, r14
    11a2:	c6 01       	movw	r24, r12
    11a4:	0e 94 56 08 	call	0x10ac	; 0x10ac <u8g_SetChipSelect>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    11a8:	db 2d       	mov	r29, r11
    11aa:	23 c0       	rjmp	.+70     	; 0x11f2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value >= 0xd0 )
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
      }
      else if ( value >= 0xc0 )
    11ac:	c0 3c       	cpi	r28, 0xC0	; 192
    11ae:	a0 f0       	brcs	.+40     	; 0x11d8 <u8g_WriteEscSeqP+0xb4>
      {
        u8g_SetResetLow(u8g, dev);
    11b0:	b7 01       	movw	r22, r14
    11b2:	c6 01       	movw	r24, r12
    11b4:	0e 94 60 08 	call	0x10c0	; 0x10c0 <u8g_SetResetLow>
        value &= 0x0f;
        value <<= 4;
    11b8:	c2 95       	swap	r28
    11ba:	c0 7f       	andi	r28, 0xF0	; 240
        value+=2;
    11bc:	ce 5f       	subi	r28, 0xFE	; 254
        u8g_Delay(value);
    11be:	d0 e0       	ldi	r29, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    11c6:	b7 01       	movw	r22, r14
    11c8:	c6 01       	movw	r24, r12
    11ca:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <u8g_SetResetHigh>
        u8g_Delay(value);
    11ce:	ce 01       	movw	r24, r28
    11d0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <u8g_Delay>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    11d4:	db 2d       	mov	r29, r11
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <u8g_WriteEscSeqP+0xce>
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    11d8:	cc 23       	and	r28, r28
    11da:	54 f0       	brlt	.+20     	; 0x11f0 <u8g_WriteEscSeqP+0xcc>
      {
        u8g_Delay(value);
    11dc:	8c 2f       	mov	r24, r28
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <u8g_Delay>
      }
      is_escape = 0;
    11e4:	db 2d       	mov	r29, r11
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <u8g_WriteEscSeqP+0xce>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    11e8:	da 2d       	mov	r29, r10
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <u8g_WriteEscSeqP+0xce>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    11ec:	db 2d       	mov	r29, r11
    11ee:	01 c0       	rjmp	.+2      	; 0x11f2 <u8g_WriteEscSeqP+0xce>
    11f0:	db 2d       	mov	r29, r11
    }
    esc_seq++;
    11f2:	0f 5f       	subi	r16, 0xFF	; 255
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
  }
    11f6:	a7 cf       	rjmp	.-178    	; 0x1146 <u8g_WriteEscSeqP+0x22>
  return 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	ff 90       	pop	r15
    1204:	ef 90       	pop	r14
    1206:	df 90       	pop	r13
    1208:	cf 90       	pop	r12
    120a:	bf 90       	pop	r11
    120c:	af 90       	pop	r10
    120e:	08 95       	ret

00001210 <u8g_com_arduino_ssd_start_sequence>:
//#define I2C_CMD_MODE  0x080
#define I2C_CMD_MODE    0x000
#define I2C_DATA_MODE   0x040

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    1214:	fc 01       	movw	r30, r24
    1216:	23 a5       	ldd	r18, Z+43	; 0x2b
    1218:	22 23       	and	r18, r18
    121a:	b1 f0       	breq	.+44     	; 0x1248 <u8g_com_arduino_ssd_start_sequence+0x38>
    121c:	ec 01       	movw	r28, r24
    return 1;

  /* setup bus, might be a repeated start */
  if ( u8g_i2c_start(I2C_SLA) == 0 )
    121e:	88 e7       	ldi	r24, 0x78	; 120
    1220:	0e 94 12 0a 	call	0x1424	; 0x1424 <u8g_i2c_start>
    1224:	88 23       	and	r24, r24
    1226:	89 f0       	breq	.+34     	; 0x124a <u8g_com_arduino_ssd_start_sequence+0x3a>
    return 0;
  if ( u8g->pin_list[U8G_PI_A0_STATE] == 0 )
    1228:	8e a1       	ldd	r24, Y+38	; 0x26
    122a:	81 11       	cpse	r24, r1
    122c:	05 c0       	rjmp	.+10     	; 0x1238 <u8g_com_arduino_ssd_start_sequence+0x28>
  {
    if ( u8g_i2c_send_byte(I2C_CMD_MODE) == 0 )
    122e:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g_i2c_send_byte>
    1232:	81 11       	cpse	r24, r1
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <u8g_com_arduino_ssd_start_sequence+0x32>
    1236:	09 c0       	rjmp	.+18     	; 0x124a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }
  else
  {
    if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
    1238:	80 e4       	ldi	r24, 0x40	; 64
    123a:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g_i2c_send_byte>
    123e:	88 23       	and	r24, r24
    1240:	21 f0       	breq	.+8      	; 0x124a <u8g_com_arduino_ssd_start_sequence+0x3a>
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
    1242:	1b a6       	std	Y+43, r1	; 0x2b
  return 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	01 c0       	rjmp	.+2      	; 0x124a <u8g_com_arduino_ssd_start_sequence+0x3a>

uint8_t u8g_com_arduino_ssd_start_sequence(u8g_t *u8g)
{
  /* are we requested to set the a0 state? */
  if ( u8g->pin_list[U8G_PI_SET_A0] == 0 )
    return 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
      return 0;
  }

  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	08 95       	ret

00001250 <u8g_com_arduino_ssd_i2c_fn>:

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    1250:	cf 92       	push	r12
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	e4 2e       	mov	r14, r20
    1260:	89 01       	movw	r16, r18
  switch(msg)
    1262:	63 30       	cpi	r22, 0x03	; 3
    1264:	b1 f0       	breq	.+44     	; 0x1292 <u8g_com_arduino_ssd_i2c_fn+0x42>
    1266:	30 f4       	brcc	.+12     	; 0x1274 <u8g_com_arduino_ssd_i2c_fn+0x24>
    1268:	61 30       	cpi	r22, 0x01	; 1
    126a:	69 f0       	breq	.+26     	; 0x1286 <u8g_com_arduino_ssd_i2c_fn+0x36>
    126c:	62 30       	cpi	r22, 0x02	; 2
    126e:	09 f4       	brne	.+2      	; 0x1272 <u8g_com_arduino_ssd_i2c_fn+0x22>
    1270:	6f c0       	rjmp	.+222    	; 0x1350 <u8g_com_arduino_ssd_i2c_fn+0x100>
    1272:	74 c0       	rjmp	.+232    	; 0x135c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1274:	66 30       	cpi	r22, 0x06	; 6
    1276:	41 f1       	breq	.+80     	; 0x12c8 <u8g_com_arduino_ssd_i2c_fn+0x78>
    1278:	67 30       	cpi	r22, 0x07	; 7
    127a:	09 f4       	brne	.+2      	; 0x127e <u8g_com_arduino_ssd_i2c_fn+0x2e>
    127c:	48 c0       	rjmp	.+144    	; 0x130e <u8g_com_arduino_ssd_i2c_fn+0xbe>
    127e:	65 30       	cpi	r22, 0x05	; 5
    1280:	09 f0       	breq	.+2      	; 0x1284 <u8g_com_arduino_ssd_i2c_fn+0x34>
    1282:	6c c0       	rjmp	.+216    	; 0x135c <u8g_com_arduino_ssd_i2c_fn+0x10c>
    1284:	10 c0       	rjmp	.+32     	; 0x12a6 <u8g_com_arduino_ssd_i2c_fn+0x56>
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
    1286:	fc 01       	movw	r30, r24
    1288:	86 a5       	ldd	r24, Z+46	; 0x2e
    128a:	0e 94 ca 09 	call	0x1394	; 0x1394 <u8g_i2c_init>
      }
      */
#endif
      break;
  }
  return 1;
    128e:	c1 e0       	ldi	r28, 0x01	; 1
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);

      break;
    1290:	6a c0       	rjmp	.+212    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
    1292:	fc 01       	movw	r30, r24
    1294:	16 a2       	std	Z+38, r1	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
    1296:	21 e0       	ldi	r18, 0x01	; 1
    1298:	23 a7       	std	Z+43, r18	; 0x2b
      if ( arg_val == 0 )
    129a:	41 11       	cpse	r20, r1
    129c:	61 c0       	rjmp	.+194    	; 0x1360 <u8g_com_arduino_ssd_i2c_fn+0x110>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
    129e:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
      }
      */
#endif
      break;
  }
  return 1;
    12a2:	c1 e0       	ldi	r28, 0x01	; 1
    12a4:	60 c0       	rjmp	.+192    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    12a6:	0e 94 08 09 	call	0x1210	; 0x1210 <u8g_com_arduino_ssd_start_sequence>
    12aa:	c8 2f       	mov	r28, r24
    12ac:	81 11       	cpse	r24, r1
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <u8g_com_arduino_ssd_i2c_fn+0x66>
	return u8g_i2c_stop(), 0;
    12b0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
    12b4:	58 c0       	rjmp	.+176    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
    12b6:	8e 2d       	mov	r24, r14
    12b8:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g_i2c_send_byte>
    12bc:	c8 2f       	mov	r28, r24
    12be:	81 11       	cpse	r24, r1
    12c0:	51 c0       	rjmp	.+162    	; 0x1364 <u8g_com_arduino_ssd_i2c_fn+0x114>
	return u8g_i2c_stop(), 0;
    12c2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
    12c6:	4f c0       	rjmp	.+158    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    12c8:	0e 94 08 09 	call	0x1210	; 0x1210 <u8g_com_arduino_ssd_start_sequence>
    12cc:	c8 2f       	mov	r28, r24
    12ce:	88 23       	and	r24, r24
    12d0:	21 f0       	breq	.+8      	; 0x12da <u8g_com_arduino_ssd_i2c_fn+0x8a>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    12d2:	e1 10       	cpse	r14, r1
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <u8g_com_arduino_ssd_i2c_fn+0x90>
      }
      */
#endif
      break;
  }
  return 1;
    12d6:	c1 e0       	ldi	r28, 0x01	; 1
    12d8:	46 c0       	rjmp	.+140    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    12da:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
    12de:	43 c0       	rjmp	.+134    	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
    12e0:	68 01       	movw	r12, r16
    12e2:	ea 94       	dec	r14
    12e4:	8e 2d       	mov	r24, r14
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	08 0f       	add	r16, r24
    12ec:	19 1f       	adc	r17, r25
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
    12ee:	f6 01       	movw	r30, r12
    12f0:	81 91       	ld	r24, Z+
    12f2:	6f 01       	movw	r12, r30
    12f4:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g_i2c_send_byte>
    12f8:	c8 2f       	mov	r28, r24
    12fa:	81 11       	cpse	r24, r1
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <u8g_com_arduino_ssd_i2c_fn+0xb4>
	    return u8g_i2c_stop(), 0;
    12fe:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
    1302:	31 c0       	rjmp	.+98     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1304:	c0 16       	cp	r12, r16
    1306:	d1 06       	cpc	r13, r17
    1308:	91 f7       	brne	.-28     	; 0x12ee <u8g_com_arduino_ssd_i2c_fn+0x9e>
      }
      */
#endif
      break;
  }
  return 1;
    130a:	c1 e0       	ldi	r28, 0x01	; 1
    130c:	2c c0       	rjmp	.+88     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
    130e:	0e 94 08 09 	call	0x1210	; 0x1210 <u8g_com_arduino_ssd_start_sequence>
    1312:	c8 2f       	mov	r28, r24
    1314:	88 23       	and	r24, r24
    1316:	21 f0       	breq	.+8      	; 0x1320 <u8g_com_arduino_ssd_i2c_fn+0xd0>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1318:	e1 10       	cpse	r14, r1
    131a:	05 c0       	rjmp	.+10     	; 0x1326 <u8g_com_arduino_ssd_i2c_fn+0xd6>
      }
      */
#endif
      break;
  }
  return 1;
    131c:	c1 e0       	ldi	r28, 0x01	; 1
    131e:	23 c0       	rjmp	.+70     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
    1320:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <u8g_i2c_stop>
    1324:	20 c0       	rjmp	.+64     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1326:	ea 94       	dec	r14
    1328:	f1 2c       	mov	r15, r1
    132a:	ff ef       	ldi	r31, 0xFF	; 255
    132c:	ef 1a       	sub	r14, r31
    132e:	ff 0a       	sbc	r15, r31
    1330:	e0 0e       	add	r14, r16
    1332:	f1 1e       	adc	r15, r17
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
    1334:	f8 01       	movw	r30, r16
    1336:	84 91       	lpm	r24, Z
    1338:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g_i2c_send_byte>
    133c:	c8 2f       	mov	r28, r24
    133e:	88 23       	and	r24, r24
    1340:	91 f0       	breq	.+36     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
	    return 0;
          ptr++;
    1342:	0f 5f       	subi	r16, 0xFF	; 255
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    1346:	0e 15       	cp	r16, r14
    1348:	1f 05       	cpc	r17, r15
    134a:	a1 f7       	brne	.-24     	; 0x1334 <u8g_com_arduino_ssd_i2c_fn+0xe4>
      }
      */
#endif
      break;
  }
  return 1;
    134c:	c1 e0       	ldi	r28, 0x01	; 1
    134e:	0b c0       	rjmp	.+22     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
    1350:	fc 01       	movw	r30, r24
    1352:	46 a3       	std	Z+38, r20	; 0x26
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	23 a7       	std	Z+43, r18	; 0x2b
      }
      */
#endif
      break;
  }
  return 1;
    1358:	c1 e0       	ldi	r28, 0x01	; 1
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
    135a:	05 c0       	rjmp	.+10     	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
  }
  return 1;
    135c:	c1 e0       	ldi	r28, 0x01	; 1
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1360:	c1 e0       	ldi	r28, 0x01	; 1
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <u8g_com_arduino_ssd_i2c_fn+0x116>
    1364:	c1 e0       	ldi	r28, 0x01	; 1
}
    1366:	8c 2f       	mov	r24, r28
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	08 95       	ret

00001378 <u8g_i2c_set_error>:
}

uint8_t u8g_i2c_get_err_pos(void)
{
  return u8g_i2c_err_pos;
}
    1378:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <u8g_i2c_err_code>
    137c:	91 11       	cpse	r25, r1
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <u8g_i2c_set_error+0x10>
    1380:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u8g_i2c_err_code>
    1384:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <__data_end>
    1388:	08 95       	ret

0000138a <u8g_i2c_clear_error>:
    138a:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <u8g_i2c_err_code>
    138e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
    1392:	08 95       	ret

00001394 <u8g_i2c_init>:
    TWSR = 0;
	--> 400KHz

    F_CPU/(2*100000)-8  --> calculate TWBR value for 100KHz
*/
  u8g_i2c_opt = options;
    1394:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u8g_i2c_opt>
  TWSR = 0;
    1398:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  if ( options & U8G_I2C_OPT_FAST )
    139c:	84 ff       	sbrs	r24, 4
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <u8g_i2c_init+0x14>
  {
    TWBR = F_CPU/(2*400000)-8;
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <u8g_i2c_init+0x1a>
  }
  else
  {  
    TWBR = F_CPU/(2*100000)-8;
    13a8:	80 e2       	ldi	r24, 0x20	; 32
    13aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  }
  u8g_i2c_clear_error();
    13ae:	0e 94 c5 09 	call	0x138a	; 0x138a <u8g_i2c_clear_error>
    13b2:	08 95       	ret

000013b4 <u8g_i2c_wait>:
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <u8g_i2c_wait+0x8>
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
    13c0:	20 ed       	ldi	r18, 0xD0	; 208
    13c2:	37 e0       	ldi	r19, 0x07	; 7
    13c4:	3a 83       	std	Y+2, r19	; 0x02
    13c6:	29 83       	std	Y+1, r18	; 0x01
  while( !(TWCR & mask) )
    13c8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13cc:	98 23       	and	r25, r24
    13ce:	01 f5       	brne	.+64     	; 0x1410 <u8g_i2c_wait+0x5c>
  {
      if ( cnt == 0 )
    13d0:	29 81       	ldd	r18, Y+1	; 0x01
    13d2:	3a 81       	ldd	r19, Y+2	; 0x02
    13d4:	23 2b       	or	r18, r19
    13d6:	39 f0       	breq	.+14     	; 0x13e6 <u8g_i2c_wait+0x32>
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    13d8:	ec eb       	ldi	r30, 0xBC	; 188
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	0e c0       	rjmp	.+28     	; 0x13fa <u8g_i2c_wait+0x46>
  {
      if ( cnt == 0 )
    13de:	29 81       	ldd	r18, Y+1	; 0x01
    13e0:	3a 81       	ldd	r19, Y+2	; 0x02
    13e2:	23 2b       	or	r18, r19
    13e4:	51 f4       	brne	.+20     	; 0x13fa <u8g_i2c_wait+0x46>
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    13e6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8g_i2c_opt>
    13ea:	18 2f       	mov	r17, r24
    13ec:	12 70       	andi	r17, 0x02	; 2
    13ee:	81 fd       	sbrc	r24, 1
    13f0:	11 c0       	rjmp	.+34     	; 0x1414 <u8g_i2c_wait+0x60>
	{
	  return 1;	/* all ok */
	}
	else
	{
	  u8g_i2c_set_error(U8G_I2C_ERR_TIMEOUT, pos);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 bc 09 	call	0x1378	; 0x1378 <u8g_i2c_set_error>
	  return 0; /* error */
    13f8:	0e c0       	rjmp	.+28     	; 0x1416 <u8g_i2c_wait+0x62>
	}
      }
      cnt--;
    13fa:	29 81       	ldd	r18, Y+1	; 0x01
    13fc:	3a 81       	ldd	r19, Y+2	; 0x02
    13fe:	21 50       	subi	r18, 0x01	; 1
    1400:	31 09       	sbc	r19, r1
    1402:	3a 83       	std	Y+2, r19	; 0x02
    1404:	29 83       	std	Y+1, r18	; 0x01
}

uint8_t u8g_i2c_wait(uint8_t mask, uint8_t pos)
{
  volatile uint16_t cnt = 2000;	/* timout value should be > 280 for 50KHz Bus and 16 Mhz CPU, however the start condition might need longer */
  while( !(TWCR & mask) )
    1406:	90 81       	ld	r25, Z
    1408:	98 23       	and	r25, r24
    140a:	49 f3       	breq	.-46     	; 0x13de <u8g_i2c_wait+0x2a>
	  return 0; /* error */
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
    140c:	11 e0       	ldi	r17, 0x01	; 1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <u8g_i2c_wait+0x62>
    1410:	11 e0       	ldi	r17, 0x01	; 1
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <u8g_i2c_wait+0x62>
  {
      if ( cnt == 0 )
      {
	if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
	{
	  return 1;	/* all ok */
    1414:	11 e0       	ldi	r17, 0x01	; 1
	}
      }
      cnt--;
    }
  return 1;	/* all ok */
}
    1416:	81 2f       	mov	r24, r17
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	08 95       	ret

00001424 <u8g_i2c_start>:

/* sla includes all 8 bits (with r/w bit), assums master transmit */
uint8_t u8g_i2c_start(uint8_t sla)
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	d8 2f       	mov	r29, r24
  register uint8_t status;
  
  /* send start */
  TWCR = _BV(TWINT) |  _BV(TWSTA)  |  _BV(TWEN);
    142a:	94 ea       	ldi	r25, 0xA4	; 164
    142c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
   
  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 1) == 0 )
    1430:	61 e0       	ldi	r22, 0x01	; 1
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	0e 94 da 09 	call	0x13b4	; 0x13b4 <u8g_i2c_wait>
    1438:	c8 2f       	mov	r28, r24
    143a:	88 23       	and	r24, r24
    143c:	61 f1       	breq	.+88     	; 0x1496 <u8g_i2c_start+0x72>
    return 0;
  
  status = TW_STATUS;
    143e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1442:	98 7f       	andi	r25, 0xF8	; 248
 
  /* check status after start */  
  if ( status != TW_START && status != TW_REP_START )
    1444:	98 30       	cpi	r25, 0x08	; 8
    1446:	41 f0       	breq	.+16     	; 0x1458 <u8g_i2c_start+0x34>
    1448:	90 31       	cpi	r25, 0x10	; 16
    144a:	31 f0       	breq	.+12     	; 0x1458 <u8g_i2c_start+0x34>
  {
    u8g_i2c_set_error(U8G_I2C_ERR_BUS, 1);
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	0e 94 bc 09 	call	0x1378	; 0x1378 <u8g_i2c_set_error>
    return 0;
    1454:	c0 e0       	ldi	r28, 0x00	; 0
    1456:	1f c0       	rjmp	.+62     	; 0x1496 <u8g_i2c_start+0x72>
  }

  /* set slave address */  
  TWDR = sla;
    1458:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  
  /* enable sla transfer */
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    145c:	84 e8       	ldi	r24, 0x84	; 132
    145e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* wait */
  if ( u8g_i2c_wait(_BV(TWINT), 2) == 0 )
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	0e 94 da 09 	call	0x13b4	; 0x13b4 <u8g_i2c_wait>
    146a:	c8 2f       	mov	r28, r24
    146c:	88 23       	and	r24, r24
    146e:	99 f0       	breq	.+38     	; 0x1496 <u8g_i2c_start+0x72>
    return 0;

  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    1470:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8g_i2c_opt>
    1474:	c8 2f       	mov	r28, r24
    1476:	c2 70       	andi	r28, 0x02	; 2
    1478:	81 fd       	sbrc	r24, 1
    147a:	0a c0       	rjmp	.+20     	; 0x1490 <u8g_i2c_start+0x6c>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;
    147c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1480:	88 7f       	andi	r24, 0xF8	; 248
    /* check status after sla */  
    if ( status != TW_MT_SLA_ACK )
    1482:	88 31       	cpi	r24, 0x18	; 24
    1484:	39 f0       	breq	.+14     	; 0x1494 <u8g_i2c_start+0x70>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 2);
    1486:	62 e0       	ldi	r22, 0x02	; 2
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	0e 94 bc 09 	call	0x1378	; 0x1378 <u8g_i2c_set_error>
      return 0;
    148e:	03 c0       	rjmp	.+6      	; 0x1496 <u8g_i2c_start+0x72>
    }
  }

   return 1;
    1490:	c1 e0       	ldi	r28, 0x01	; 1
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <u8g_i2c_start+0x72>
    1494:	c1 e0       	ldi	r28, 0x01	; 1
}
    1496:	8c 2f       	mov	r24, r28
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <u8g_i2c_send_byte>:

uint8_t u8g_i2c_send_byte(uint8_t data)
{
    149e:	cf 93       	push	r28
  register uint8_t status;
  TWDR = data;
    14a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  TWCR = _BV(TWINT)  |  _BV(TWEN);
    14a4:	84 e8       	ldi	r24, 0x84	; 132
    14a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  if ( u8g_i2c_wait(_BV(TWINT), 3) == 0 )
    14aa:	63 e0       	ldi	r22, 0x03	; 3
    14ac:	80 e8       	ldi	r24, 0x80	; 128
    14ae:	0e 94 da 09 	call	0x13b4	; 0x13b4 <u8g_i2c_wait>
    14b2:	c8 2f       	mov	r28, r24
    14b4:	88 23       	and	r24, r24
    14b6:	99 f0       	breq	.+38     	; 0x14de <u8g_i2c_send_byte+0x40>
    return 0;
    
  if ( u8g_i2c_opt & U8G_I2C_OPT_NO_ACK )
    14b8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <u8g_i2c_opt>
    14bc:	c8 2f       	mov	r28, r24
    14be:	c2 70       	andi	r28, 0x02	; 2
    14c0:	81 fd       	sbrc	r24, 1
    14c2:	0a c0       	rjmp	.+20     	; 0x14d8 <u8g_i2c_send_byte+0x3a>
  {
    /* do not check for ACK */
  }
  else
  {
    status = TW_STATUS;  
    14c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    14c8:	88 7f       	andi	r24, 0xF8	; 248
    if ( status != TW_MT_DATA_ACK )
    14ca:	88 32       	cpi	r24, 0x28	; 40
    14cc:	39 f0       	breq	.+14     	; 0x14dc <u8g_i2c_send_byte+0x3e>
    {
      u8g_i2c_set_error(U8G_I2C_ERR_BUS, 3);
    14ce:	63 e0       	ldi	r22, 0x03	; 3
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	0e 94 bc 09 	call	0x1378	; 0x1378 <u8g_i2c_set_error>
      return 0;
    14d6:	03 c0       	rjmp	.+6      	; 0x14de <u8g_i2c_send_byte+0x40>
    }
  }

  return 1;  
    14d8:	c1 e0       	ldi	r28, 0x01	; 1
    14da:	01 c0       	rjmp	.+2      	; 0x14de <u8g_i2c_send_byte+0x40>
    14dc:	c1 e0       	ldi	r28, 0x01	; 1
}
    14de:	8c 2f       	mov	r24, r28
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <u8g_i2c_stop>:

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    14e4:	84 e9       	ldi	r24, 0x94	; 148
    14e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
    14ea:	64 e0       	ldi	r22, 0x04	; 4
    14ec:	80 e1       	ldi	r24, 0x10	; 16
    14ee:	0e 94 da 09 	call	0x13b4	; 0x13b4 <u8g_i2c_wait>
    14f2:	08 95       	ret

000014f4 <u8g_Delay>:
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	39 f0       	breq	.+14     	; 0x1506 <u8g_Delay+0x12>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14f8:	2e ec       	ldi	r18, 0xCE	; 206
    14fa:	37 e0       	ldi	r19, 0x07	; 7
    14fc:	f9 01       	movw	r30, r18
    14fe:	31 97       	sbiw	r30, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1502:	01 97       	sbiw	r24, 0x01	; 1
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1504:	d9 f7       	brne	.-10     	; 0x14fc <u8g_Delay+0x8>
    1506:	08 95       	ret

00001508 <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	7c 01       	movw	r14, r24
    151c:	8b 01       	movw	r16, r22
    151e:	c4 2f       	mov	r28, r20
    1520:	69 01       	movw	r12, r18
  switch(msg)
    1522:	40 31       	cpi	r20, 0x10	; 16
    1524:	99 f1       	breq	.+102    	; 0x158c <u8g_dev_ssd1306_128x64_fn+0x84>
    1526:	18 f4       	brcc	.+6      	; 0x152e <u8g_dev_ssd1306_128x64_fn+0x26>
    1528:	4a 30       	cpi	r20, 0x0A	; 10
    152a:	31 f0       	breq	.+12     	; 0x1538 <u8g_dev_ssd1306_128x64_fn+0x30>
    152c:	3b c0       	rjmp	.+118    	; 0x15a4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    152e:	41 31       	cpi	r20, 0x11	; 17
    1530:	99 f1       	breq	.+102    	; 0x1598 <u8g_dev_ssd1306_128x64_fn+0x90>
    1532:	45 31       	cpi	r20, 0x15	; 21
    1534:	59 f0       	breq	.+22     	; 0x154c <u8g_dev_ssd1306_128x64_fn+0x44>
    1536:	36 c0       	rjmp	.+108    	; 0x15a4 <u8g_dev_ssd1306_128x64_fn+0x9c>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    1538:	42 e0       	ldi	r20, 0x02	; 2
    153a:	0e 94 4c 08 	call	0x1098	; 0x1098 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
    153e:	4c ee       	ldi	r20, 0xEC	; 236
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	b8 01       	movw	r22, r16
    1544:	c7 01       	movw	r24, r14
    1546:	0e 94 92 08 	call	0x1124	; 0x1124 <u8g_WriteEscSeqP>
      break;
    154a:	2c c0       	rjmp	.+88     	; 0x15a4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    154c:	fb 01       	movw	r30, r22
    154e:	a2 80       	ldd	r10, Z+2	; 0x02
    1550:	b3 80       	ldd	r11, Z+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
    1552:	44 ee       	ldi	r20, 0xE4	; 228
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	0e 94 92 08 	call	0x1124	; 0x1124 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    155a:	f5 01       	movw	r30, r10
    155c:	44 81       	ldd	r20, Z+4	; 0x04
    155e:	40 6b       	ori	r20, 0xB0	; 176
    1560:	b8 01       	movw	r22, r16
    1562:	c7 01       	movw	r24, r14
    1564:	0e 94 80 08 	call	0x1100	; 0x1100 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    1568:	41 e0       	ldi	r20, 0x01	; 1
    156a:	b8 01       	movw	r22, r16
    156c:	c7 01       	movw	r24, r14
    156e:	0e 94 76 08 	call	0x10ec	; 0x10ec <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    1572:	a8 01       	movw	r20, r16
    1574:	b7 01       	movw	r22, r14
    1576:	c5 01       	movw	r24, r10
    1578:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <u8g_pb_WriteBuffer>
    157c:	88 23       	and	r24, r24
    157e:	c1 f0       	breq	.+48     	; 0x15b0 <u8g_dev_ssd1306_128x64_fn+0xa8>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	b8 01       	movw	r22, r16
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 56 08 	call	0x10ac	; 0x10ac <u8g_SetChipSelect>
      }
      break;
    158a:	0c c0       	rjmp	.+24     	; 0x15a4 <u8g_dev_ssd1306_128x64_fn+0x9c>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    158c:	4b ed       	ldi	r20, 0xDB	; 219
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	0e 94 92 08 	call	0x1124	; 0x1124 <u8g_WriteEscSeqP>
      return 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	0c c0       	rjmp	.+24     	; 0x15b0 <u8g_dev_ssd1306_128x64_fn+0xa8>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    1598:	40 ed       	ldi	r20, 0xD0	; 208
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 92 08 	call	0x1124	; 0x1124 <u8g_WriteEscSeqP>
      return 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <u8g_dev_ssd1306_128x64_fn+0xa8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    15a4:	96 01       	movw	r18, r12
    15a6:	4c 2f       	mov	r20, r28
    15a8:	b8 01       	movw	r22, r16
    15aa:	c7 01       	movw	r24, r14
    15ac:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <u8g_dev_pb8v1_base_fn>
}
    15b0:	cf 91       	pop	r28
    15b2:	1f 91       	pop	r17
    15b4:	0f 91       	pop	r16
    15b6:	ff 90       	pop	r15
    15b8:	ef 90       	pop	r14
    15ba:	df 90       	pop	r13
    15bc:	cf 90       	pop	r12
    15be:	bf 90       	pop	r11
    15c0:	af 90       	pop	r10
    15c2:	08 95       	ret

000015c4 <u8g_font_get_word>:
  cap_a = u8g_font_GetCapitalAHeight(u8g->font);
  u8g_font_calc_str_min_box(u8g, s, &buf);
  if ( buf.y_max < cap_a )
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}
    15c4:	fc 01       	movw	r30, r24
    15c6:	e6 0f       	add	r30, r22
    15c8:	f1 1d       	adc	r31, r1
    15ca:	84 91       	lpm	r24, Z
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	98 2f       	mov	r25, r24
    15d0:	88 27       	eor	r24, r24
    15d2:	31 96       	adiw	r30, 0x01	; 1
    15d4:	e4 91       	lpm	r30, Z
    15d6:	8e 0f       	add	r24, r30
    15d8:	91 1d       	adc	r25, r1
    15da:	08 95       	ret

000015dc <u8g_font_GetFormat>:
    15dc:	fc 01       	movw	r30, r24
    15de:	84 91       	lpm	r24, Z
    15e0:	08 95       	ret

000015e2 <u8g_font_GetFontGlyphStructureSize>:
    15e2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <u8g_font_GetFormat>
    15e6:	88 23       	and	r24, r24
    15e8:	21 f0       	breq	.+8      	; 0x15f2 <u8g_font_GetFontGlyphStructureSize+0x10>
    15ea:	82 30       	cpi	r24, 0x02	; 2
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <u8g_font_GetFontGlyphStructureSize+0x10>
    15ee:	83 e0       	ldi	r24, 0x03	; 3
    15f0:	08 95       	ret
    15f2:	86 e0       	ldi	r24, 0x06	; 6
    15f4:	08 95       	ret

000015f6 <u8g_font_calc_vref_font>:
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	08 95       	ret

000015fa <u8g_font_GetEncoding65Pos>:
    15fa:	66 e0       	ldi	r22, 0x06	; 6
    15fc:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <u8g_font_get_word>
    1600:	08 95       	ret

00001602 <u8g_font_GetEncoding97Pos>:
    1602:	68 e0       	ldi	r22, 0x08	; 8
    1604:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <u8g_font_get_word>
    1608:	08 95       	ret

0000160a <u8g_font_GetFontStartEncoding>:
    160a:	0a 96       	adiw	r24, 0x0a	; 10
    160c:	fc 01       	movw	r30, r24
    160e:	84 91       	lpm	r24, Z
    1610:	08 95       	ret

00001612 <u8g_font_GetFontEndEncoding>:
    1612:	0b 96       	adiw	r24, 0x0b	; 11
    1614:	fc 01       	movw	r30, r24
    1616:	84 91       	lpm	r24, Z
    1618:	08 95       	ret

0000161a <u8g_GetGlyph>:
    161a:	af 92       	push	r10
    161c:	bf 92       	push	r11
    161e:	cf 92       	push	r12
    1620:	df 92       	push	r13
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	cf 93       	push	r28
    162c:	df 93       	push	r29
    162e:	7c 01       	movw	r14, r24
    1630:	b6 2e       	mov	r11, r22
    1632:	dc 01       	movw	r26, r24
    1634:	14 96       	adiw	r26, 0x04	; 4
    1636:	cd 91       	ld	r28, X+
    1638:	dc 91       	ld	r29, X
    163a:	15 97       	sbiw	r26, 0x05	; 5
    163c:	ce 01       	movw	r24, r28
    163e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <u8g_font_GetFormat>
    1642:	18 2f       	mov	r17, r24
    1644:	f7 01       	movw	r30, r14
    1646:	84 81       	ldd	r24, Z+4	; 0x04
    1648:	95 81       	ldd	r25, Z+5	; 0x05
    164a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <u8g_font_GetFontGlyphStructureSize>
    164e:	d8 2e       	mov	r13, r24
    1650:	11 30       	cpi	r17, 0x01	; 1
    1652:	29 f4       	brne	.+10     	; 0x165e <u8g_GetGlyph+0x44>
    1654:	0f 2e       	mov	r0, r31
    1656:	ff e0       	ldi	r31, 0x0F	; 15
    1658:	af 2e       	mov	r10, r31
    165a:	f0 2d       	mov	r31, r0
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <u8g_GetGlyph+0x48>
    165e:	aa 24       	eor	r10, r10
    1660:	aa 94       	dec	r10
    1662:	d7 01       	movw	r26, r14
    1664:	14 96       	adiw	r26, 0x04	; 4
    1666:	8d 91       	ld	r24, X+
    1668:	9c 91       	ld	r25, X
    166a:	15 97       	sbiw	r26, 0x05	; 5
    166c:	0e 94 05 0b 	call	0x160a	; 0x160a <u8g_font_GetFontStartEncoding>
    1670:	18 2f       	mov	r17, r24
    1672:	f7 01       	movw	r30, r14
    1674:	84 81       	ldd	r24, Z+4	; 0x04
    1676:	95 81       	ldd	r25, Z+5	; 0x05
    1678:	0e 94 09 0b 	call	0x1612	; 0x1612 <u8g_font_GetFontEndEncoding>
    167c:	08 2f       	mov	r16, r24
    167e:	d7 01       	movw	r26, r14
    1680:	14 96       	adiw	r26, 0x04	; 4
    1682:	8d 91       	ld	r24, X+
    1684:	9c 91       	ld	r25, X
    1686:	15 97       	sbiw	r26, 0x05	; 5
    1688:	0e 94 01 0b 	call	0x1602	; 0x1602 <u8g_font_GetEncoding97Pos>
    168c:	b0 e6       	ldi	r27, 0x60	; 96
    168e:	bb 15       	cp	r27, r11
    1690:	30 f4       	brcc	.+12     	; 0x169e <u8g_GetGlyph+0x84>
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	21 f0       	breq	.+8      	; 0x169e <u8g_GetGlyph+0x84>
    1696:	c8 0f       	add	r28, r24
    1698:	d9 1f       	adc	r29, r25
    169a:	11 e6       	ldi	r17, 0x61	; 97
    169c:	0f c0       	rjmp	.+30     	; 0x16bc <u8g_GetGlyph+0xa2>
    169e:	f7 01       	movw	r30, r14
    16a0:	84 81       	ldd	r24, Z+4	; 0x04
    16a2:	95 81       	ldd	r25, Z+5	; 0x05
    16a4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <u8g_font_GetEncoding65Pos>
    16a8:	f0 e4       	ldi	r31, 0x40	; 64
    16aa:	fb 15       	cp	r31, r11
    16ac:	30 f4       	brcc	.+12     	; 0x16ba <u8g_GetGlyph+0xa0>
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	21 f0       	breq	.+8      	; 0x16ba <u8g_GetGlyph+0xa0>
    16b2:	c8 0f       	add	r28, r24
    16b4:	d9 1f       	adc	r29, r25
    16b6:	11 e4       	ldi	r17, 0x41	; 65
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <u8g_GetGlyph+0xa2>
    16ba:	61 96       	adiw	r28, 0x11	; 17
    16bc:	0b 15       	cp	r16, r11
    16be:	90 f4       	brcc	.+36     	; 0x16e4 <u8g_GetGlyph+0xca>
    16c0:	d7 01       	movw	r26, r14
    16c2:	50 96       	adiw	r26, 0x10	; 16
    16c4:	1c 92       	st	X, r1
    16c6:	50 97       	sbiw	r26, 0x10	; 16
    16c8:	53 96       	adiw	r26, 0x13	; 19
    16ca:	1c 92       	st	X, r1
    16cc:	53 97       	sbiw	r26, 0x13	; 19
    16ce:	54 96       	adiw	r26, 0x14	; 20
    16d0:	1c 92       	st	X, r1
    16d2:	54 97       	sbiw	r26, 0x14	; 20
    16d4:	51 96       	adiw	r26, 0x11	; 17
    16d6:	1c 92       	st	X, r1
    16d8:	51 97       	sbiw	r26, 0x11	; 17
    16da:	52 96       	adiw	r26, 0x12	; 18
    16dc:	1c 92       	st	X, r1
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	75 c0       	rjmp	.+234    	; 0x17ce <u8g_GetGlyph+0x1b4>
    16e4:	01 17       	cp	r16, r17
    16e6:	08 f4       	brcc	.+2      	; 0x16ea <u8g_GetGlyph+0xd0>
    16e8:	6a c0       	rjmp	.+212    	; 0x17be <u8g_GetGlyph+0x1a4>
    16ea:	2d 2d       	mov	r18, r13
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	6e 01       	movw	r12, r28
    16f0:	fe 01       	movw	r30, r28
    16f2:	94 91       	lpm	r25, Z
    16f4:	9f 3f       	cpi	r25, 0xFF	; 255
    16f6:	11 f4       	brne	.+4      	; 0x16fc <u8g_GetGlyph+0xe2>
    16f8:	21 96       	adiw	r28, 0x01	; 1
    16fa:	5d c0       	rjmp	.+186    	; 0x17b6 <u8g_GetGlyph+0x19c>
    16fc:	1b 11       	cpse	r17, r11
    16fe:	52 c0       	rjmp	.+164    	; 0x17a4 <u8g_GetGlyph+0x18a>
    1700:	8e 01       	movw	r16, r28
    1702:	d7 01       	movw	r26, r14
    1704:	14 96       	adiw	r26, 0x04	; 4
    1706:	8d 91       	ld	r24, X+
    1708:	9c 91       	ld	r25, X
    170a:	15 97       	sbiw	r26, 0x05	; 5
    170c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <u8g_font_GetFormat>
    1710:	88 23       	and	r24, r24
    1712:	11 f0       	breq	.+4      	; 0x1718 <u8g_GetGlyph+0xfe>
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	f1 f4       	brne	.+60     	; 0x1754 <u8g_GetGlyph+0x13a>
    1718:	f6 01       	movw	r30, r12
    171a:	c4 90       	lpm	r12, Z
    171c:	d7 01       	movw	r26, r14
    171e:	53 96       	adiw	r26, 0x13	; 19
    1720:	cc 92       	st	X, r12
    1722:	53 97       	sbiw	r26, 0x13	; 19
    1724:	f8 01       	movw	r30, r16
    1726:	31 96       	adiw	r30, 0x01	; 1
    1728:	e4 91       	lpm	r30, Z
    172a:	54 96       	adiw	r26, 0x14	; 20
    172c:	ec 93       	st	X, r30
    172e:	54 97       	sbiw	r26, 0x14	; 20
    1730:	f8 01       	movw	r30, r16
    1732:	33 96       	adiw	r30, 0x03	; 3
    1734:	e4 91       	lpm	r30, Z
    1736:	50 96       	adiw	r26, 0x10	; 16
    1738:	ec 93       	st	X, r30
    173a:	50 97       	sbiw	r26, 0x10	; 16
    173c:	f8 01       	movw	r30, r16
    173e:	34 96       	adiw	r30, 0x04	; 4
    1740:	e4 91       	lpm	r30, Z
    1742:	51 96       	adiw	r26, 0x11	; 17
    1744:	ec 93       	st	X, r30
    1746:	51 97       	sbiw	r26, 0x11	; 17
    1748:	f8 01       	movw	r30, r16
    174a:	35 96       	adiw	r30, 0x05	; 5
    174c:	e4 91       	lpm	r30, Z
    174e:	52 96       	adiw	r26, 0x12	; 18
    1750:	ec 93       	st	X, r30
    1752:	25 c0       	rjmp	.+74     	; 0x179e <u8g_GetGlyph+0x184>
    1754:	fe 01       	movw	r30, r28
    1756:	84 91       	lpm	r24, Z
    1758:	98 2f       	mov	r25, r24
    175a:	9f 70       	andi	r25, 0x0F	; 15
    175c:	92 50       	subi	r25, 0x02	; 2
    175e:	d7 01       	movw	r26, r14
    1760:	52 96       	adiw	r26, 0x12	; 18
    1762:	9c 93       	st	X, r25
    1764:	52 97       	sbiw	r26, 0x12	; 18
    1766:	c8 2e       	mov	r12, r24
    1768:	c6 94       	lsr	r12
    176a:	c6 94       	lsr	r12
    176c:	c6 94       	lsr	r12
    176e:	c6 94       	lsr	r12
    1770:	51 96       	adiw	r26, 0x11	; 17
    1772:	cc 92       	st	X, r12
    1774:	51 97       	sbiw	r26, 0x11	; 17
    1776:	fe 01       	movw	r30, r28
    1778:	31 96       	adiw	r30, 0x01	; 1
    177a:	e4 91       	lpm	r30, Z
    177c:	8e 2f       	mov	r24, r30
    177e:	8f 70       	andi	r24, 0x0F	; 15
    1780:	54 96       	adiw	r26, 0x14	; 20
    1782:	8c 93       	st	X, r24
    1784:	54 97       	sbiw	r26, 0x14	; 20
    1786:	e2 95       	swap	r30
    1788:	ef 70       	andi	r30, 0x0F	; 15
    178a:	53 96       	adiw	r26, 0x13	; 19
    178c:	ec 93       	st	X, r30
    178e:	53 97       	sbiw	r26, 0x13	; 19
    1790:	fe 01       	movw	r30, r28
    1792:	32 96       	adiw	r30, 0x02	; 2
    1794:	e4 91       	lpm	r30, Z
    1796:	e2 95       	swap	r30
    1798:	ef 70       	andi	r30, 0x0F	; 15
    179a:	50 96       	adiw	r26, 0x10	; 16
    179c:	ec 93       	st	X, r30
    179e:	8c 2f       	mov	r24, r28
    17a0:	9d 2f       	mov	r25, r29
    17a2:	15 c0       	rjmp	.+42     	; 0x17ce <u8g_GetGlyph+0x1b4>
    17a4:	fe 01       	movw	r30, r28
    17a6:	32 96       	adiw	r30, 0x02	; 2
    17a8:	e4 91       	lpm	r30, Z
    17aa:	ea 21       	and	r30, r10
    17ac:	c9 01       	movw	r24, r18
    17ae:	8e 0f       	add	r24, r30
    17b0:	91 1d       	adc	r25, r1
    17b2:	c8 0f       	add	r28, r24
    17b4:	d9 1f       	adc	r29, r25
    17b6:	10 17       	cp	r17, r16
    17b8:	11 f0       	breq	.+4      	; 0x17be <u8g_GetGlyph+0x1a4>
    17ba:	1f 5f       	subi	r17, 0xFF	; 255
    17bc:	98 cf       	rjmp	.-208    	; 0x16ee <u8g_GetGlyph+0xd4>
    17be:	f7 01       	movw	r30, r14
    17c0:	10 8a       	std	Z+16, r1	; 0x10
    17c2:	13 8a       	std	Z+19, r1	; 0x13
    17c4:	14 8a       	std	Z+20, r1	; 0x14
    17c6:	11 8a       	std	Z+17, r1	; 0x11
    17c8:	12 8a       	std	Z+18, r1	; 0x12
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	08 95       	ret

000017e4 <u8g_draw_glyph>:
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	5c 01       	movw	r10, r24
    1802:	16 2f       	mov	r17, r22
    1804:	64 2e       	mov	r6, r20
    1806:	62 2f       	mov	r22, r18
    1808:	0e 94 0d 0b 	call	0x161a	; 0x161a <u8g_GetGlyph>
    180c:	6c 01       	movw	r12, r24
    180e:	89 2b       	or	r24, r25
    1810:	09 f4       	brne	.+2      	; 0x1814 <u8g_draw_glyph+0x30>
    1812:	48 c0       	rjmp	.+144    	; 0x18a4 <u8g_draw_glyph+0xc0>
    1814:	f5 01       	movw	r30, r10
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	95 81       	ldd	r25, Z+5	; 0x05
    181a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <u8g_font_GetFontGlyphStructureSize>
    181e:	98 2e       	mov	r9, r24
    1820:	f5 01       	movw	r30, r10
    1822:	d3 89       	ldd	r29, Z+19	; 0x13
    1824:	c4 89       	ldd	r28, Z+20	; 0x14
    1826:	71 88       	ldd	r7, Z+17	; 0x11
    1828:	71 0e       	add	r7, r17
    182a:	92 89       	ldd	r25, Z+18	; 0x12
    182c:	69 1a       	sub	r6, r25
    182e:	f6 2c       	mov	r15, r6
    1830:	fc 1a       	sub	r15, r28
    1832:	0c 2f       	mov	r16, r28
    1834:	2d 2f       	mov	r18, r29
    1836:	4f 2d       	mov	r20, r15
    1838:	67 2d       	mov	r22, r7
    183a:	c5 01       	movw	r24, r10
    183c:	0e 94 1a 08 	call	0x1034	; 0x1034 <u8g_IsBBXIntersection>
    1840:	81 11       	cpse	r24, r1
    1842:	03 c0       	rjmp	.+6      	; 0x184a <u8g_draw_glyph+0x66>
    1844:	f5 01       	movw	r30, r10
    1846:	80 89       	ldd	r24, Z+16	; 0x10
    1848:	2e c0       	rjmp	.+92     	; 0x18a6 <u8g_draw_glyph+0xc2>
    184a:	d9 5f       	subi	r29, 0xF9	; 249
    184c:	ed 2e       	mov	r14, r29
    184e:	e6 94       	lsr	r14
    1850:	e6 94       	lsr	r14
    1852:	e6 94       	lsr	r14
    1854:	cc 23       	and	r28, r28
    1856:	19 f1       	breq	.+70     	; 0x189e <u8g_draw_glyph+0xba>
    1858:	e6 01       	movw	r28, r12
    185a:	c9 0d       	add	r28, r9
    185c:	d1 1d       	adc	r29, r1
    185e:	88 24       	eor	r8, r8
    1860:	8a 94       	dec	r8
    1862:	8e 0c       	add	r8, r14
    1864:	91 2c       	mov	r9, r1
    1866:	ff ef       	ldi	r31, 0xFF	; 255
    1868:	8f 1a       	sub	r8, r31
    186a:	9f 0a       	sbc	r9, r31
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <u8g_draw_glyph+0xac>
    186e:	fe 01       	movw	r30, r28
    1870:	04 91       	lpm	r16, Z
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	4f 2d       	mov	r20, r15
    1876:	61 2f       	mov	r22, r17
    1878:	c5 01       	movw	r24, r10
    187a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <u8g_Draw8Pixel>
    187e:	21 96       	adiw	r28, 0x01	; 1
    1880:	18 5f       	subi	r17, 0xF8	; 248
    1882:	cc 15       	cp	r28, r12
    1884:	dd 05       	cpc	r29, r13
    1886:	99 f7       	brne	.-26     	; 0x186e <u8g_draw_glyph+0x8a>
    1888:	e6 01       	movw	r28, r12
    188a:	f3 94       	inc	r15
    188c:	f6 14       	cp	r15, r6
    188e:	39 f0       	breq	.+14     	; 0x189e <u8g_draw_glyph+0xba>
    1890:	ee 20       	and	r14, r14
    1892:	d9 f3       	breq	.-10     	; 0x188a <u8g_draw_glyph+0xa6>
    1894:	6e 01       	movw	r12, r28
    1896:	c8 0c       	add	r12, r8
    1898:	d9 1c       	adc	r13, r9
    189a:	17 2d       	mov	r17, r7
    189c:	e8 cf       	rjmp	.-48     	; 0x186e <u8g_draw_glyph+0x8a>
    189e:	f5 01       	movw	r30, r10
    18a0:	80 89       	ldd	r24, Z+16	; 0x10
    18a2:	01 c0       	rjmp	.+2      	; 0x18a6 <u8g_draw_glyph+0xc2>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	df 90       	pop	r13
    18b4:	cf 90       	pop	r12
    18b6:	bf 90       	pop	r11
    18b8:	af 90       	pop	r10
    18ba:	9f 90       	pop	r9
    18bc:	8f 90       	pop	r8
    18be:	7f 90       	pop	r7
    18c0:	6f 90       	pop	r6
    18c2:	08 95       	ret

000018c4 <u8g_DrawStr>:
    18c4:	cf 92       	push	r12
    18c6:	df 92       	push	r13
    18c8:	ff 92       	push	r15
    18ca:	0f 93       	push	r16
    18cc:	1f 93       	push	r17
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
    18d2:	6c 01       	movw	r12, r24
    18d4:	c6 2f       	mov	r28, r22
    18d6:	f4 2e       	mov	r15, r20
    18d8:	89 01       	movw	r16, r18
    18da:	dc 01       	movw	r26, r24
    18dc:	55 96       	adiw	r26, 0x15	; 21
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	56 97       	sbiw	r26, 0x16	; 22
    18e4:	09 95       	icall
    18e6:	f8 0e       	add	r15, r24
    18e8:	f8 01       	movw	r30, r16
    18ea:	20 81       	ld	r18, Z
    18ec:	22 23       	and	r18, r18
    18ee:	81 f0       	breq	.+32     	; 0x1910 <u8g_DrawStr+0x4c>
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	d0 e0       	ldi	r29, 0x00	; 0
    18f6:	4f 2d       	mov	r20, r15
    18f8:	6c 2f       	mov	r22, r28
    18fa:	c6 01       	movw	r24, r12
    18fc:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <u8g_draw_glyph>
    1900:	c8 0f       	add	r28, r24
    1902:	d8 0f       	add	r29, r24
    1904:	d8 01       	movw	r26, r16
    1906:	2d 91       	ld	r18, X+
    1908:	8d 01       	movw	r16, r26
    190a:	21 11       	cpse	r18, r1
    190c:	f4 cf       	rjmp	.-24     	; 0x18f6 <u8g_DrawStr+0x32>
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <u8g_DrawStr+0x4e>
    1910:	d0 e0       	ldi	r29, 0x00	; 0
    1912:	8d 2f       	mov	r24, r29
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	df 90       	pop	r13
    1920:	cf 90       	pop	r12
    1922:	08 95       	ret

00001924 <u8g_UpdateRefHeight>:
    1924:	dc 01       	movw	r26, r24
    1926:	14 96       	adiw	r26, 0x04	; 4
    1928:	8d 91       	ld	r24, X+
    192a:	9c 91       	ld	r25, X
    192c:	15 97       	sbiw	r26, 0x05	; 5
    192e:	00 97       	sbiw	r24, 0x00	; 0
    1930:	09 f4       	brne	.+2      	; 0x1934 <u8g_UpdateRefHeight+0x10>
    1932:	4d c0       	rjmp	.+154    	; 0x19ce <u8g_UpdateRefHeight+0xaa>
    1934:	57 96       	adiw	r26, 0x17	; 23
    1936:	2c 91       	ld	r18, X
    1938:	57 97       	sbiw	r26, 0x17	; 23
    193a:	21 11       	cpse	r18, r1
    193c:	0d c0       	rjmp	.+26     	; 0x1958 <u8g_UpdateRefHeight+0x34>
    193e:	fc 01       	movw	r30, r24
    1940:	35 96       	adiw	r30, 0x05	; 5
    1942:	e4 91       	lpm	r30, Z
    1944:	58 96       	adiw	r26, 0x18	; 24
    1946:	ec 93       	st	X, r30
    1948:	58 97       	sbiw	r26, 0x18	; 24
    194a:	fc 01       	movw	r30, r24
    194c:	3c 96       	adiw	r30, 0x0c	; 12
    194e:	e4 91       	lpm	r30, Z
    1950:	59 96       	adiw	r26, 0x19	; 25
    1952:	ec 93       	st	X, r30
    1954:	59 97       	sbiw	r26, 0x19	; 25
    1956:	1b c0       	rjmp	.+54     	; 0x198e <u8g_UpdateRefHeight+0x6a>
    1958:	21 30       	cpi	r18, 0x01	; 1
    195a:	69 f4       	brne	.+26     	; 0x1976 <u8g_UpdateRefHeight+0x52>
    195c:	fc 01       	movw	r30, r24
    195e:	3f 96       	adiw	r30, 0x0f	; 15
    1960:	e4 91       	lpm	r30, Z
    1962:	58 96       	adiw	r26, 0x18	; 24
    1964:	ec 93       	st	X, r30
    1966:	58 97       	sbiw	r26, 0x18	; 24
    1968:	fc 01       	movw	r30, r24
    196a:	70 96       	adiw	r30, 0x10	; 16
    196c:	e4 91       	lpm	r30, Z
    196e:	59 96       	adiw	r26, 0x19	; 25
    1970:	ec 93       	st	X, r30
    1972:	59 97       	sbiw	r26, 0x19	; 25
    1974:	0c c0       	rjmp	.+24     	; 0x198e <u8g_UpdateRefHeight+0x6a>
    1976:	fc 01       	movw	r30, r24
    1978:	3d 96       	adiw	r30, 0x0d	; 13
    197a:	e4 91       	lpm	r30, Z
    197c:	58 96       	adiw	r26, 0x18	; 24
    197e:	ec 93       	st	X, r30
    1980:	58 97       	sbiw	r26, 0x18	; 24
    1982:	fc 01       	movw	r30, r24
    1984:	3e 96       	adiw	r30, 0x0e	; 14
    1986:	e4 91       	lpm	r30, Z
    1988:	59 96       	adiw	r26, 0x19	; 25
    198a:	ec 93       	st	X, r30
    198c:	59 97       	sbiw	r26, 0x19	; 25
    198e:	58 96       	adiw	r26, 0x18	; 24
    1990:	8c 91       	ld	r24, X
    1992:	58 97       	sbiw	r26, 0x18	; 24
    1994:	08 2e       	mov	r0, r24
    1996:	00 0c       	add	r0, r0
    1998:	99 0b       	sbc	r25, r25
    199a:	59 96       	adiw	r26, 0x19	; 25
    199c:	2c 91       	ld	r18, X
    199e:	59 97       	sbiw	r26, 0x19	; 25
    19a0:	82 1b       	sub	r24, r18
    19a2:	91 09       	sbc	r25, r1
    19a4:	27 fd       	sbrc	r18, 7
    19a6:	93 95       	inc	r25
    19a8:	5a 96       	adiw	r26, 0x1a	; 26
    19aa:	2c 91       	ld	r18, X
    19ac:	5a 97       	sbiw	r26, 0x1a	; 26
    19ae:	20 34       	cpi	r18, 0x40	; 64
    19b0:	61 f0       	breq	.+24     	; 0x19ca <u8g_UpdateRefHeight+0xa6>
    19b2:	82 9f       	mul	r24, r18
    19b4:	c0 01       	movw	r24, r0
    19b6:	11 24       	eor	r1, r1
    19b8:	00 24       	eor	r0, r0
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	00 1c       	adc	r0, r0
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	00 1c       	adc	r0, r0
    19c6:	89 2f       	mov	r24, r25
    19c8:	90 2d       	mov	r25, r0
    19ca:	5b 96       	adiw	r26, 0x1b	; 27
    19cc:	8c 93       	st	X, r24
    19ce:	08 95       	ret

000019d0 <u8g_SetFontPosBaseline>:
    19d0:	2b ef       	ldi	r18, 0xFB	; 251
    19d2:	3a e0       	ldi	r19, 0x0A	; 10
    19d4:	fc 01       	movw	r30, r24
    19d6:	36 8b       	std	Z+22, r19	; 0x16
    19d8:	25 8b       	std	Z+21, r18	; 0x15
    19da:	08 95       	ret

000019dc <u8g_SetFont>:

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
  if ( u8g->font != font )
    19e0:	fc 01       	movw	r30, r24
    19e2:	24 81       	ldd	r18, Z+4	; 0x04
    19e4:	35 81       	ldd	r19, Z+5	; 0x05
    19e6:	26 17       	cp	r18, r22
    19e8:	37 07       	cpc	r19, r23
    19ea:	49 f0       	breq	.+18     	; 0x19fe <u8g_SetFont+0x22>
    19ec:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    19ee:	75 83       	std	Z+5, r23	; 0x05
    19f0:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    19f2:	0e 94 92 0c 	call	0x1924	; 0x1924 <u8g_UpdateRefHeight>
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    19f6:	8b ef       	ldi	r24, 0xFB	; 251
    19f8:	9a e0       	ldi	r25, 0x0A	; 10
    19fa:	9e 8b       	std	Y+22, r25	; 0x16
    19fc:	8d 8b       	std	Y+21, r24	; 0x15
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	08 95       	ret

00001a04 <u8g_init_data>:
}


void u8g_DrawPixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y)
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	1d 82       	std	Y+5, r1	; 0x05
    1a0e:	1c 82       	std	Y+4, r1	; 0x04
    1a10:	1f 82       	std	Y+7, r1	; 0x07
    1a12:	1e 82       	std	Y+6, r1	; 0x06
    1a14:	19 86       	std	Y+9, r1	; 0x09
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	88 87       	std	Y+8, r24	; 0x08
    1a1a:	82 e2       	ldi	r24, 0x22	; 34
    1a1c:	8a 87       	std	Y+10, r24	; 0x0a
    1a1e:	1f 86       	std	Y+15, r1	; 0x0f
    1a20:	1e 86       	std	Y+14, r1	; 0x0e
    1a22:	fe 01       	movw	r30, r28
    1a24:	b3 96       	adiw	r30, 0x23	; 35
    1a26:	9e 01       	movw	r18, r28
    1a28:	2f 5c       	subi	r18, 0xCF	; 207
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	81 93       	st	Z+, r24
    1a30:	e2 17       	cp	r30, r18
    1a32:	f3 07       	cpc	r31, r19
    1a34:	e1 f7       	brne	.-8      	; 0x1a2e <u8g_init_data+0x2a>
    1a36:	11 e0       	ldi	r17, 0x01	; 1
    1a38:	18 a3       	std	Y+32, r17	; 0x20
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <u8g_SetFontPosBaseline>
    1a40:	1f 8b       	std	Y+23, r17	; 0x17
    1a42:	18 8e       	std	Y+24, r1	; 0x18
    1a44:	19 8e       	std	Y+25, r1	; 0x19
    1a46:	80 e4       	ldi	r24, 0x40	; 64
    1a48:	8a 8f       	std	Y+26, r24	; 0x1a
    1a4a:	1b 8e       	std	Y+27, r1	; 0x1b
    1a4c:	82 ec       	ldi	r24, 0xC2	; 194
    1a4e:	9f e0       	ldi	r25, 0x0F	; 15
    1a50:	9a ab       	std	Y+50, r25	; 0x32
    1a52:	89 ab       	std	Y+49, r24	; 0x31
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	08 95       	ret

00001a5c <u8g_call_dev_fn>:
    1a5c:	db 01       	movw	r26, r22
    1a5e:	ed 91       	ld	r30, X+
    1a60:	fc 91       	ld	r31, X
    1a62:	09 95       	icall
    1a64:	08 95       	ret

00001a66 <u8g_InitLL>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	ec 01       	movw	r28, r24
    1a70:	8b 01       	movw	r16, r22
    1a72:	e9 a9       	ldd	r30, Y+49	; 0x31
    1a74:	fa a9       	ldd	r31, Y+50	; 0x32
    1a76:	82 e0       	ldi	r24, 0x02	; 2
    1a78:	09 95       	icall
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a e0       	ldi	r20, 0x0A	; 10
    1a80:	b8 01       	movw	r22, r16
    1a82:	ce 01       	movw	r24, r28
    1a84:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1a88:	18 2f       	mov	r17, r24
    1a8a:	e9 a9       	ldd	r30, Y+49	; 0x31
    1a8c:	fa a9       	ldd	r31, Y+50	; 0x32
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	09 95       	icall
    1a92:	e9 a9       	ldd	r30, Y+49	; 0x31
    1a94:	fa a9       	ldd	r31, Y+50	; 0x32
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	09 95       	icall
    1a9a:	81 2f       	mov	r24, r17
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	08 95       	ret

00001aa6 <u8g_FirstPageLL>:
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ec 01       	movw	r28, r24
    1ab0:	8b 01       	movw	r16, r22
    1ab2:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ab4:	fa a9       	ldd	r31, Y+50	; 0x32
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	09 95       	icall
    1aba:	e9 a9       	ldd	r30, Y+49	; 0x31
    1abc:	fa a9       	ldd	r31, Y+50	; 0x32
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	09 95       	icall
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	44 e1       	ldi	r20, 0x14	; 20
    1ac8:	b8 01       	movw	r22, r16
    1aca:	ce 01       	movw	r24, r28
    1acc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1ad0:	9e 01       	movw	r18, r28
    1ad2:	2d 5c       	subi	r18, 0xCD	; 205
    1ad4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad6:	47 e1       	ldi	r20, 0x17	; 23
    1ad8:	b8 01       	movw	r22, r16
    1ada:	ce 01       	movw	r24, r28
    1adc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1ae0:	e9 a9       	ldd	r30, Y+49	; 0x31
    1ae2:	fa a9       	ldd	r31, Y+50	; 0x32
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	09 95       	icall
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <u8g_NextPageLL>:
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	ec 01       	movw	r28, r24
    1afe:	7b 01       	movw	r14, r22
    1b00:	e9 a9       	ldd	r30, Y+49	; 0x31
    1b02:	fa a9       	ldd	r31, Y+50	; 0x32
    1b04:	82 e0       	ldi	r24, 0x02	; 2
    1b06:	09 95       	icall
    1b08:	e9 a9       	ldd	r30, Y+49	; 0x31
    1b0a:	fa a9       	ldd	r31, Y+50	; 0x32
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	09 95       	icall
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	45 e1       	ldi	r20, 0x15	; 21
    1b16:	b7 01       	movw	r22, r14
    1b18:	ce 01       	movw	r24, r28
    1b1a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1b1e:	18 2f       	mov	r17, r24
    1b20:	88 23       	and	r24, r24
    1b22:	41 f0       	breq	.+16     	; 0x1b34 <u8g_NextPageLL+0x42>
    1b24:	9e 01       	movw	r18, r28
    1b26:	2d 5c       	subi	r18, 0xCD	; 205
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	47 e1       	ldi	r20, 0x17	; 23
    1b2c:	b7 01       	movw	r22, r14
    1b2e:	ce 01       	movw	r24, r28
    1b30:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1b34:	e9 a9       	ldd	r30, Y+49	; 0x31
    1b36:	fa a9       	ldd	r31, Y+50	; 0x32
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	09 95       	icall
    1b3c:	81 2f       	mov	r24, r17
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	ff 90       	pop	r15
    1b46:	ef 90       	pop	r14
    1b48:	08 95       	ret

00001b4a <u8g_GetWidthLL>:
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
    1b4e:	1f 92       	push	r1
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	9e 01       	movw	r18, r28
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	46 e4       	ldi	r20, 0x46	; 70
    1b5c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	0f 90       	pop	r0
    1b64:	df 91       	pop	r29
    1b66:	cf 91       	pop	r28
    1b68:	08 95       	ret

00001b6a <u8g_GetHeightLL>:
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	1f 92       	push	r1
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
    1b74:	9e 01       	movw	r18, r28
    1b76:	2f 5f       	subi	r18, 0xFF	; 255
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	47 e4       	ldi	r20, 0x47	; 71
    1b7c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	0f 90       	pop	r0
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	08 95       	ret

00001b8a <u8g_GetModeLL>:
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	48 e4       	ldi	r20, 0x48	; 72
    1b90:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1b94:	08 95       	ret

00001b96 <u8g_UpdateDimension>:
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	ec 01       	movw	r28, r24
    1b9c:	6a 81       	ldd	r22, Y+2	; 0x02
    1b9e:	7b 81       	ldd	r23, Y+3	; 0x03
    1ba0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <u8g_GetWidthLL>
    1ba4:	88 83       	st	Y, r24
    1ba6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ba8:	7b 81       	ldd	r23, Y+3	; 0x03
    1baa:	ce 01       	movw	r24, r28
    1bac:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <u8g_GetHeightLL>
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb4:	7b 81       	ldd	r23, Y+3	; 0x03
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <u8g_GetModeLL>
    1bbc:	8b 87       	std	Y+11, r24	; 0x0b
    1bbe:	9e 01       	movw	r18, r28
    1bc0:	2d 5c       	subi	r18, 0xCD	; 205
    1bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1bc6:	7b 81       	ldd	r23, Y+3	; 0x03
    1bc8:	47 e1       	ldi	r20, 0x17	; 23
    1bca:	ce 01       	movw	r24, r28
    1bcc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <u8g_Begin>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	ec 01       	movw	r28, r24
    1bdc:	6a 81       	ldd	r22, Y+2	; 0x02
    1bde:	7b 81       	ldd	r23, Y+3	; 0x03
    1be0:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <u8g_InitLL>
    1be4:	88 23       	and	r24, r24
    1be6:	21 f0       	breq	.+8      	; 0x1bf0 <u8g_Begin+0x1a>
    1be8:	ce 01       	movw	r24, r28
    1bea:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <u8g_UpdateDimension>
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	08 95       	ret

00001bf6 <u8g_InitI2C>:
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	ec 01       	movw	r28, r24
    1c02:	7b 01       	movw	r14, r22
    1c04:	14 2f       	mov	r17, r20
    1c06:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <u8g_init_data>
    1c0a:	fb 82       	std	Y+3, r15	; 0x03
    1c0c:	ea 82       	std	Y+2, r14	; 0x02
    1c0e:	1e a7       	std	Y+46, r17	; 0x2e
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <u8g_Begin>
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	1f 91       	pop	r17
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	08 95       	ret

00001c22 <u8g_FirstPage>:
    1c22:	fc 01       	movw	r30, r24
    1c24:	62 81       	ldd	r22, Z+2	; 0x02
    1c26:	73 81       	ldd	r23, Z+3	; 0x03
    1c28:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <u8g_FirstPageLL>
    1c2c:	08 95       	ret

00001c2e <u8g_NextPage>:
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	ec 01       	movw	r28, r24
    1c34:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c36:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	09 f0       	breq	.+2      	; 0x1c3e <u8g_NextPage+0x10>
    1c3c:	09 95       	icall
    1c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    1c40:	7b 81       	ldd	r23, Y+3	; 0x03
    1c42:	ce 01       	movw	r24, r28
    1c44:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <u8g_NextPageLL>
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <u8g_Draw8Pixel>:
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    1c4e:	0f 93       	push	r16
    1c50:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    1c56:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    1c58:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    1c5a:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    1c5c:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    1c5e:	9f 01       	movw	r18, r30
    1c60:	24 5e       	subi	r18, 0xE4	; 228
    1c62:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    1c64:	4b e3       	ldi	r20, 0x3B	; 59
    1c66:	bc 01       	movw	r22, r24
    1c68:	cf 01       	movw	r24, r30
    1c6a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <u8g_call_dev_fn>
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <u8g_page_First>:
void u8g_page_Init(u8g_page_t *p, u8g_uint_t page_height, u8g_uint_t total_height )
{
  p->page_height = page_height;
  p->total_height = total_height;
  p->page = 0;
  u8g_page_First(p);
    1c72:	fc 01       	movw	r30, r24
    1c74:	12 82       	std	Z+2, r1	; 0x02
    1c76:	80 81       	ld	r24, Z
    1c78:	81 50       	subi	r24, 0x01	; 1
    1c7a:	83 83       	std	Z+3, r24	; 0x03
    1c7c:	14 82       	std	Z+4, r1	; 0x04
    1c7e:	08 95       	ret

00001c80 <u8g_page_Next>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    1c80:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    1c82:	90 81       	ld	r25, Z
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	89 0f       	add	r24, r25
    1c88:	82 83       	std	Z+2, r24	; 0x02
  if ( p->page_y0 >= p->total_height )
    1c8a:	21 81       	ldd	r18, Z+1	; 0x01
    1c8c:	82 17       	cp	r24, r18
    1c8e:	60 f4       	brcc	.+24     	; 0x1ca8 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    1c90:	84 81       	ldd	r24, Z+4	; 0x04
    1c92:	8f 5f       	subi	r24, 0xFF	; 255
    1c94:	84 83       	std	Z+4, r24	; 0x04
  y1 = p->page_y1;
    1c96:	83 81       	ldd	r24, Z+3	; 0x03
  y1 += p->page_height;
    1c98:	98 0f       	add	r25, r24
  if ( y1 >= p->total_height )
    1c9a:	92 17       	cp	r25, r18
    1c9c:	10 f0       	brcs	.+4      	; 0x1ca2 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    1c9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ca0:	92 0f       	add	r25, r18
  }
  p->page_y1 = y1;
    1ca2:	93 83       	std	Z+3, r25	; 0x03
  
  return 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    1caa:	08 95       	ret

00001cac <u8g_pb_Clear>:
  tmp = bbx->x;
  tmp += bbx->w;
  tmp--;
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}
    1cac:	dc 01       	movw	r26, r24
    1cae:	16 96       	adiw	r26, 0x06	; 6
    1cb0:	ed 91       	ld	r30, X+
    1cb2:	fc 91       	ld	r31, X
    1cb4:	17 97       	sbiw	r26, 0x07	; 7
    1cb6:	15 96       	adiw	r26, 0x05	; 5
    1cb8:	8c 91       	ld	r24, X
    1cba:	9f 01       	movw	r18, r30
    1cbc:	28 0f       	add	r18, r24
    1cbe:	31 1d       	adc	r19, r1
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	11 92       	st	Z+, r1
    1cc4:	e8 17       	cp	r30, r24
    1cc6:	f9 07       	cpc	r31, r25
    1cc8:	e1 f7       	brne	.-8      	; 0x1cc2 <u8g_pb_Clear+0x16>
    1cca:	08 95       	ret

00001ccc <u8g_pb_IsYIntersection>:
    1ccc:	fc 01       	movw	r30, r24
    1cce:	91 e0       	ldi	r25, 0x01	; 1
    1cd0:	83 81       	ldd	r24, Z+3	; 0x03
    1cd2:	86 17       	cp	r24, r22
    1cd4:	08 f4       	brcc	.+2      	; 0x1cd8 <u8g_pb_IsYIntersection+0xc>
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	31 e0       	ldi	r19, 0x01	; 1
    1cda:	46 17       	cp	r20, r22
    1cdc:	08 f0       	brcs	.+2      	; 0x1ce0 <u8g_pb_IsYIntersection+0x14>
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	83 2f       	mov	r24, r19
    1ce2:	89 2b       	or	r24, r25
    1ce4:	21 e0       	ldi	r18, 0x01	; 1
    1ce6:	52 81       	ldd	r21, Z+2	; 0x02
    1ce8:	45 17       	cp	r20, r21
    1cea:	08 f4       	brcc	.+2      	; 0x1cee <u8g_pb_IsYIntersection+0x22>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	28 23       	and	r18, r24
    1cf0:	83 2f       	mov	r24, r19
    1cf2:	89 23       	and	r24, r25
    1cf4:	82 2b       	or	r24, r18
    1cf6:	08 95       	ret

00001cf8 <u8g_pb_GetPageBox>:

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	fb 01       	movw	r30, r22
  box->x0 = 0;
    1cfc:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	8c 91       	ld	r24, X
    1d02:	12 97       	sbiw	r26, 0x02	; 2
    1d04:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    1d06:	15 96       	adiw	r26, 0x05	; 5
    1d08:	8c 91       	ld	r24, X
    1d0a:	15 97       	sbiw	r26, 0x05	; 5
    1d0c:	81 50       	subi	r24, 0x01	; 1
    1d0e:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    1d10:	13 96       	adiw	r26, 0x03	; 3
    1d12:	8c 91       	ld	r24, X
    1d14:	83 83       	std	Z+3, r24	; 0x03
    1d16:	08 95       	ret

00001d18 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    1d18:	fb 01       	movw	r30, r22
    1d1a:	31 81       	ldd	r19, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    1d1c:	23 81       	ldd	r18, Z+3	; 0x03
    1d1e:	21 30       	cpi	r18, 0x01	; 1
    1d20:	19 f0       	breq	.+6      	; 0x1d28 <u8g_pb_Is8PixelVisible+0x10>
    1d22:	23 30       	cpi	r18, 0x03	; 3
    1d24:	21 f0       	breq	.+8      	; 0x1d2e <u8g_pb_Is8PixelVisible+0x16>
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <u8g_pb_Is8PixelVisible+0x1c>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    1d28:	48 e0       	ldi	r20, 0x08	; 8
    1d2a:	43 0f       	add	r20, r19
      break;
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    1d2e:	43 2f       	mov	r20, r19
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    1d30:	38 50       	subi	r19, 0x08	; 8
      break;
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <u8g_pb_Is8PixelVisible+0x1e>

uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
    1d34:	43 2f       	mov	r20, r19
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    1d36:	63 2f       	mov	r22, r19
    1d38:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <u8g_pb_IsYIntersection>
}
    1d3c:	08 95       	ret

00001d3e <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    1d3e:	fc 01       	movw	r30, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    1d44:	26 81       	ldd	r18, Z+6	; 0x06
    1d46:	37 81       	ldd	r19, Z+7	; 0x07
    1d48:	45 81       	ldd	r20, Z+5	; 0x05
    1d4a:	0e 94 8a 08 	call	0x1114	; 0x1114 <u8g_WriteSequence>
}
    1d4e:	08 95       	ret

00001d50 <u8g_pb8v1_set_pixel>:
      case 2: arg_pixel->x--; break;
      case 3: arg_pixel->y--; break;
    }
    pixel <<= 1;
  } while( pixel != 0  );
}
    1d50:	dc 01       	movw	r26, r24
    1d52:	16 96       	adiw	r26, 0x06	; 6
    1d54:	ed 91       	ld	r30, X+
    1d56:	fc 91       	ld	r31, X
    1d58:	17 97       	sbiw	r26, 0x07	; 7
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	8c 91       	ld	r24, X
    1d5e:	48 1b       	sub	r20, r24
    1d60:	47 70       	andi	r20, 0x07	; 7
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <u8g_pb8v1_set_pixel+0x1c>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	4a 95       	dec	r20
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <u8g_pb8v1_set_pixel+0x18>
    1d70:	e6 0f       	add	r30, r22
    1d72:	f1 1d       	adc	r31, r1
    1d74:	22 23       	and	r18, r18
    1d76:	21 f0       	breq	.+8      	; 0x1d80 <u8g_pb8v1_set_pixel+0x30>
    1d78:	90 81       	ld	r25, Z
    1d7a:	89 2b       	or	r24, r25
    1d7c:	80 83       	st	Z, r24
    1d7e:	08 95       	ret
    1d80:	80 95       	com	r24
    1d82:	90 81       	ld	r25, Z
    1d84:	89 23       	and	r24, r25
    1d86:	80 83       	st	Z, r24
    1d88:	08 95       	ret

00001d8a <u8g_pb8v1_SetPixel>:
    1d8a:	fb 01       	movw	r30, r22
    1d8c:	41 81       	ldd	r20, Z+1	; 0x01
    1d8e:	fc 01       	movw	r30, r24
    1d90:	22 81       	ldd	r18, Z+2	; 0x02
    1d92:	42 17       	cp	r20, r18
    1d94:	70 f0       	brcs	.+28     	; 0x1db2 <u8g_pb8v1_SetPixel+0x28>
    1d96:	23 81       	ldd	r18, Z+3	; 0x03
    1d98:	24 17       	cp	r18, r20
    1d9a:	58 f0       	brcs	.+22     	; 0x1db2 <u8g_pb8v1_SetPixel+0x28>
    1d9c:	fb 01       	movw	r30, r22
    1d9e:	30 81       	ld	r19, Z
    1da0:	fc 01       	movw	r30, r24
    1da2:	25 81       	ldd	r18, Z+5	; 0x05
    1da4:	32 17       	cp	r19, r18
    1da6:	28 f4       	brcc	.+10     	; 0x1db2 <u8g_pb8v1_SetPixel+0x28>
    1da8:	fb 01       	movw	r30, r22
    1daa:	24 81       	ldd	r18, Z+4	; 0x04
    1dac:	63 2f       	mov	r22, r19
    1dae:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <u8g_pb8v1_set_pixel>
    1db2:	08 95       	ret

00001db4 <u8g_pb8v1_Set8PixelOpt2>:


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	7c 01       	movw	r14, r24
    1dc4:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    1dc6:	1a 81       	ldd	r17, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	49 f0       	breq	.+18     	; 0x1de0 <u8g_pb8v1_Set8PixelOpt2+0x2c>
    1dce:	28 f0       	brcs	.+10     	; 0x1dda <u8g_pb8v1_Set8PixelOpt2+0x26>
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	51 f0       	breq	.+20     	; 0x1de8 <u8g_pb8v1_Set8PixelOpt2+0x34>
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	59 f0       	breq	.+22     	; 0x1dee <u8g_pb8v1_Set8PixelOpt2+0x3a>
    1dd8:	0e c0       	rjmp	.+28     	; 0x1df6 <u8g_pb8v1_Set8PixelOpt2+0x42>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1dda:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    1ddc:	01 e0       	ldi	r16, 0x01	; 1
    1dde:	0d c0       	rjmp	.+26     	; 0x1dfa <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 1: dy++; break;
    1de0:	dd 24       	eor	r13, r13
    1de2:	d3 94       	inc	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    1de4:	00 e0       	ldi	r16, 0x00	; 0
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    1de6:	09 c0       	rjmp	.+18     	; 0x1dfa <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1de8:	d1 2c       	mov	r13, r1
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    1dea:	0f ef       	ldi	r16, 0xFF	; 255
    1dec:	06 c0       	rjmp	.+12     	; 0x1dfa <u8g_pb8v1_Set8PixelOpt2+0x46>
    case 3: dy--; break;
    1dee:	dd 24       	eor	r13, r13
    1df0:	da 94       	dec	r13


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    1df2:	00 e0       	ldi	r16, 0x00	; 0
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    1df4:	02 c0       	rjmp	.+4      	; 0x1dfa <u8g_pb8v1_Set8PixelOpt2+0x46>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1df6:	d1 2c       	mov	r13, r1


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    1df8:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    1dfa:	11 23       	and	r17, r17
    1dfc:	24 f4       	brge	.+8      	; 0x1e06 <u8g_pb8v1_Set8PixelOpt2+0x52>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    1dfe:	be 01       	movw	r22, r28
    1e00:	c7 01       	movw	r24, r14
    1e02:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
    1e06:	98 81       	ld	r25, Y
    1e08:	90 0f       	add	r25, r16
    1e0a:	98 83       	st	Y, r25
    arg_pixel->y += dy;
    1e0c:	99 81       	ldd	r25, Y+1	; 0x01
    1e0e:	9d 0d       	add	r25, r13
    1e10:	99 83       	std	Y+1, r25	; 0x01
    pixel <<= 1;
    1e12:	11 0f       	add	r17, r17
  } while( pixel != 0  );
    1e14:	91 f7       	brne	.-28     	; 0x1dfa <u8g_pb8v1_Set8PixelOpt2+0x46>
  
}
    1e16:	df 91       	pop	r29
    1e18:	cf 91       	pop	r28
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	08 95       	ret

00001e26 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1e2e:	fb 01       	movw	r30, r22
    1e30:	c2 81       	ldd	r28, Z+2	; 0x02
    1e32:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	fa 01       	movw	r30, r20
    1e38:	74 97       	sbiw	r30, 0x14	; 20
    1e3a:	e4 33       	cpi	r30, 0x34	; 52
    1e3c:	f1 05       	cpc	r31, r1
    1e3e:	c8 f5       	brcc	.+114    	; 0x1eb2 <u8g_dev_pb8v1_base_fn+0x8c>
    1e40:	89 01       	movw	r16, r18
    1e42:	ec 5c       	subi	r30, 0xCC	; 204
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__tablejump2__>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    1e4a:	b9 01       	movw	r22, r18
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <u8g_pb_Is8PixelVisible>
    1e52:	88 23       	and	r24, r24
    1e54:	81 f1       	breq	.+96     	; 0x1eb6 <u8g_dev_pb8v1_base_fn+0x90>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    1e56:	b8 01       	movw	r22, r16
    1e58:	ce 01       	movw	r24, r28
    1e5a:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	2b c0       	rjmp	.+86     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    1e62:	b9 01       	movw	r22, r18
    1e64:	ce 01       	movw	r24, r28
    1e66:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <u8g_pb8v1_SetPixel>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    1e6c:	25 c0       	rjmp	.+74     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    1e6e:	ce 01       	movw	r24, r28
    1e70:	0e 94 56 0e 	call	0x1cac	; 0x1cac <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
    1e74:	ce 01       	movw	r24, r28
    1e76:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <u8g_page_First>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    1e7c:	1d c0       	rjmp	.+58     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <u8g_page_Next>
    1e84:	88 23       	and	r24, r24
    1e86:	c1 f0       	breq	.+48     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
        return 0;
      u8g_pb_Clear(pb);
    1e88:	ce 01       	movw	r24, r28
    1e8a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <u8g_pb_Clear>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
      u8g_pb_Clear(pb);
      break;
    1e90:	13 c0       	rjmp	.+38     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    1e92:	b9 01       	movw	r22, r18
    1e94:	ce 01       	movw	r24, r28
    1e96:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <u8g_pb_GetPageBox>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    1e9c:	0d c0       	rjmp	.+26     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	f9 01       	movw	r30, r18
    1ea2:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    1ea6:	08 c0       	rjmp	.+16     	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	f9 01       	movw	r30, r18
    1eac:	80 83       	st	Z, r24
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
      break;
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <u8g_dev_pb8v1_base_fn+0x92>
  }
  return 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <u8g_draw_hline>:
    h ^=7;
    h++;
    pixel <<= h&7;
    u8g_Draw8Pixel(u8g, x, y, 1, pixel);
  }
}
    1ec2:	cf 92       	push	r12
    1ec4:	df 92       	push	r13
    1ec6:	ef 92       	push	r14
    1ec8:	ff 92       	push	r15
    1eca:	0f 93       	push	r16
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	7c 01       	movw	r14, r24
    1ed4:	c6 2e       	mov	r12, r22
    1ed6:	14 2f       	mov	r17, r20
    1ed8:	d2 2e       	mov	r13, r18
    1eda:	47 e0       	ldi	r20, 0x07	; 7
    1edc:	42 17       	cp	r20, r18
    1ede:	b8 f4       	brcc	.+46     	; 0x1f0e <u8g_draw_hline+0x4c>
    1ee0:	d2 2f       	mov	r29, r18
    1ee2:	c6 2f       	mov	r28, r22
    1ee4:	0f ef       	ldi	r16, 0xFF	; 255
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	41 2f       	mov	r20, r17
    1eea:	6c 2f       	mov	r22, r28
    1eec:	c7 01       	movw	r24, r14
    1eee:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <u8g_Draw8Pixel>
    1ef2:	d8 50       	subi	r29, 0x08	; 8
    1ef4:	c8 5f       	subi	r28, 0xF8	; 248
    1ef6:	d8 30       	cpi	r29, 0x08	; 8
    1ef8:	a8 f7       	brcc	.-22     	; 0x1ee4 <u8g_draw_hline+0x22>
    1efa:	9d 2d       	mov	r25, r13
    1efc:	97 70       	andi	r25, 0x07	; 7
    1efe:	28 e0       	ldi	r18, 0x08	; 8
    1f00:	2c 0d       	add	r18, r12
    1f02:	88 ef       	ldi	r24, 0xF8	; 248
    1f04:	8d 0d       	add	r24, r13
    1f06:	88 7f       	andi	r24, 0xF8	; 248
    1f08:	c2 2e       	mov	r12, r18
    1f0a:	c8 0e       	add	r12, r24
    1f0c:	01 c0       	rjmp	.+2      	; 0x1f10 <u8g_draw_hline+0x4e>
    1f0e:	92 2f       	mov	r25, r18
    1f10:	99 23       	and	r25, r25
    1f12:	99 f0       	breq	.+38     	; 0x1f3a <u8g_draw_hline+0x78>
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	89 27       	eor	r24, r25
    1f18:	8f 5f       	subi	r24, 0xFF	; 255
    1f1a:	87 70       	andi	r24, 0x07	; 7
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	a9 01       	movw	r20, r18
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <u8g_draw_hline+0x66>
    1f24:	44 0f       	add	r20, r20
    1f26:	55 1f       	adc	r21, r21
    1f28:	8a 95       	dec	r24
    1f2a:	e2 f7       	brpl	.-8      	; 0x1f24 <u8g_draw_hline+0x62>
    1f2c:	04 2f       	mov	r16, r20
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	41 2f       	mov	r20, r17
    1f32:	6c 2d       	mov	r22, r12
    1f34:	c7 01       	movw	r24, r14
    1f36:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <u8g_Draw8Pixel>
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	ff 90       	pop	r15
    1f44:	ef 90       	pop	r14
    1f46:	df 90       	pop	r13
    1f48:	cf 90       	pop	r12
    1f4a:	08 95       	ret

00001f4c <u8g_DrawHLine>:

void u8g_DrawHLine(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w)
{
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	16 2f       	mov	r17, r22
    1f5c:	f4 2e       	mov	r15, r20
    1f5e:	e2 2e       	mov	r14, r18
  if ( u8g_IsBBXIntersection(u8g, x, y, w, 1) == 0 )
    1f60:	01 e0       	ldi	r16, 0x01	; 1
    1f62:	0e 94 1a 08 	call	0x1034	; 0x1034 <u8g_IsBBXIntersection>
    1f66:	88 23       	and	r24, r24
    1f68:	31 f0       	breq	.+12     	; 0x1f76 <u8g_DrawHLine+0x2a>
    return;
  u8g_draw_hline(u8g, x, y, w);
    1f6a:	2e 2d       	mov	r18, r14
    1f6c:	4f 2d       	mov	r20, r15
    1f6e:	61 2f       	mov	r22, r17
    1f70:	ce 01       	movw	r24, r28
    1f72:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <u8g_draw_hline>
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	08 95       	ret

00001f84 <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    1f84:	08 95       	ret

00001f86 <UART_Init>:
		}
		if(ticks%10000 == 50000){
			PINB = (0<<DBG_LED_PIN);
		}
		ticks++;
	}
    1f86:	22 e0       	ldi	r18, 0x02	; 2
    1f88:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1f8c:	9c 01       	movw	r18, r24
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	60 e4       	ldi	r22, 0x40	; 64
    1f94:	72 e4       	ldi	r23, 0x42	; 66
    1f96:	8f e0       	ldi	r24, 0x0F	; 15
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	0e 94 4a 10 	call	0x2094	; 0x2094 <__divmodsi4>
    1f9e:	21 50       	subi	r18, 0x01	; 1
    1fa0:	31 09       	sbc	r19, r1
    1fa2:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1fa6:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1faa:	88 e9       	ldi	r24, 0x98	; 152
    1fac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1fb0:	e2 ec       	ldi	r30, 0xC2	; 194
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	86 e0       	ldi	r24, 0x06	; 6
    1fb6:	80 83       	st	Z, r24
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 83       	st	Z, r24
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	08 95       	ret

00001fc0 <UART_Send>:
    1fc0:	e0 ec       	ldi	r30, 0xC0	; 192
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	90 81       	ld	r25, Z
    1fc6:	95 ff       	sbrs	r25, 5
    1fc8:	fd cf       	rjmp	.-6      	; 0x1fc4 <UART_Send+0x4>
    1fca:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1fce:	08 95       	ret

00001fd0 <UART_Send_String>:
    1fd0:	cf 93       	push	r28
    1fd2:	df 93       	push	r29
    1fd4:	ec 01       	movw	r28, r24
    1fd6:	88 81       	ld	r24, Y
    1fd8:	88 23       	and	r24, r24
    1fda:	31 f0       	breq	.+12     	; 0x1fe8 <UART_Send_String+0x18>
    1fdc:	21 96       	adiw	r28, 0x01	; 1
    1fde:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <UART_Send>
    1fe2:	89 91       	ld	r24, Y+
    1fe4:	81 11       	cpse	r24, r1
    1fe6:	fb cf       	rjmp	.-10     	; 0x1fde <UART_Send_String+0xe>
    1fe8:	8a e0       	ldi	r24, 0x0A	; 10
    1fea:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <UART_Send>
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	08 95       	ret

00001ff4 <__vector_5>:
}


//Activates if the pairing button is pressed
ISR(PCINT2_vect){
    1ff4:	1f 92       	push	r1
    1ff6:	0f 92       	push	r0
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	0f 92       	push	r0
    1ffc:	11 24       	eor	r1, r1
	//BT_Pair();
}
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <hardware_init>:

}



uint8_t hardware_init(void){
    2008:	cf 93       	push	r28

    // Configure pins
    DDRB = (1 << DBG_LED_PIN);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	84 b9       	out	0x04, r24	; 4
    PORTB = (1<<DBG_LED_PIN);
    200e:	85 b9       	out	0x05, r24	; 5

    uint8_t all_ok = TRUE;

    // Initialize peripherals
    if( UART_Init(57600) ){
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	91 ee       	ldi	r25, 0xE1	; 225
    2014:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <UART_Init>
    2018:	88 23       	and	r24, r24
    201a:	31 f0       	breq	.+12     	; 0x2028 <hardware_init+0x20>
        UART_Send_String("UART OK");
    201c:	8e e2       	ldi	r24, 0x2E	; 46
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <UART_Send_String>

    // Configure pins
    DDRB = (1 << DBG_LED_PIN);
    PORTB = (1<<DBG_LED_PIN);

    uint8_t all_ok = TRUE;
    2024:	c1 e0       	ldi	r28, 0x01	; 1
    2026:	01 c0       	rjmp	.+2      	; 0x202a <hardware_init+0x22>

    // Initialize peripherals
    if( UART_Init(57600) ){
        UART_Send_String("UART OK");
    } else {
        all_ok = FALSE;
    2028:	c0 e0       	ldi	r28, 0x00	; 0
    }

    if( OLED_Init() ){
    202a:	0e 94 0a 08 	call	0x1014	; 0x1014 <OLED_Init>
    202e:	88 23       	and	r24, r24
    2030:	29 f0       	breq	.+10     	; 0x203c <hardware_init+0x34>
        UART_Send_String("OLED OK");
    2032:	86 e3       	ldi	r24, 0x36	; 54
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <UART_Send_String>
    203a:	01 c0       	rjmp	.+2      	; 0x203e <hardware_init+0x36>
        } else {
        all_ok = FALSE;
    203c:	c0 e0       	ldi	r28, 0x00	; 0
    }

    ADC_init();
    203e:	0e 94 ca 07 	call	0xf94	; 0xf94 <ADC_init>

    PORTB &= ~(1<<DBG_LED_PIN);
    2042:	28 98       	cbi	0x05, 0	; 5

    return all_ok;
}
    2044:	8c 2f       	mov	r24, r28
    2046:	cf 91       	pop	r28
    2048:	08 95       	ret

0000204a <main>:
uint8_t hardware_init(void);


int main(void)
{
    hardware_init();
    204a:	0e 94 04 10 	call	0x2008	; 0x2008 <hardware_init>
    {
        /*PORTB |= (1<<DBG_LED_PIN);
        _delay_ms(1000);
        PORTB &= ~(1<<DBG_LED_PIN);
        _delay_ms(500);*/
    }
    204e:	ff cf       	rjmp	.-2      	; 0x204e <main+0x4>

00002050 <__udivmodsi4>:
    2050:	a1 e2       	ldi	r26, 0x21	; 33
    2052:	1a 2e       	mov	r1, r26
    2054:	aa 1b       	sub	r26, r26
    2056:	bb 1b       	sub	r27, r27
    2058:	fd 01       	movw	r30, r26
    205a:	0d c0       	rjmp	.+26     	; 0x2076 <__udivmodsi4_ep>

0000205c <__udivmodsi4_loop>:
    205c:	aa 1f       	adc	r26, r26
    205e:	bb 1f       	adc	r27, r27
    2060:	ee 1f       	adc	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	a2 17       	cp	r26, r18
    2066:	b3 07       	cpc	r27, r19
    2068:	e4 07       	cpc	r30, r20
    206a:	f5 07       	cpc	r31, r21
    206c:	20 f0       	brcs	.+8      	; 0x2076 <__udivmodsi4_ep>
    206e:	a2 1b       	sub	r26, r18
    2070:	b3 0b       	sbc	r27, r19
    2072:	e4 0b       	sbc	r30, r20
    2074:	f5 0b       	sbc	r31, r21

00002076 <__udivmodsi4_ep>:
    2076:	66 1f       	adc	r22, r22
    2078:	77 1f       	adc	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	1a 94       	dec	r1
    2080:	69 f7       	brne	.-38     	; 0x205c <__udivmodsi4_loop>
    2082:	60 95       	com	r22
    2084:	70 95       	com	r23
    2086:	80 95       	com	r24
    2088:	90 95       	com	r25
    208a:	9b 01       	movw	r18, r22
    208c:	ac 01       	movw	r20, r24
    208e:	bd 01       	movw	r22, r26
    2090:	cf 01       	movw	r24, r30
    2092:	08 95       	ret

00002094 <__divmodsi4>:
    2094:	05 2e       	mov	r0, r21
    2096:	97 fb       	bst	r25, 7
    2098:	1e f4       	brtc	.+6      	; 0x20a0 <__divmodsi4+0xc>
    209a:	00 94       	com	r0
    209c:	0e 94 61 10 	call	0x20c2	; 0x20c2 <__negsi2>
    20a0:	57 fd       	sbrc	r21, 7
    20a2:	07 d0       	rcall	.+14     	; 0x20b2 <__divmodsi4_neg2>
    20a4:	0e 94 28 10 	call	0x2050	; 0x2050 <__udivmodsi4>
    20a8:	07 fc       	sbrc	r0, 7
    20aa:	03 d0       	rcall	.+6      	; 0x20b2 <__divmodsi4_neg2>
    20ac:	4e f4       	brtc	.+18     	; 0x20c0 <__divmodsi4_exit>
    20ae:	0c 94 61 10 	jmp	0x20c2	; 0x20c2 <__negsi2>

000020b2 <__divmodsi4_neg2>:
    20b2:	50 95       	com	r21
    20b4:	40 95       	com	r20
    20b6:	30 95       	com	r19
    20b8:	21 95       	neg	r18
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	4f 4f       	sbci	r20, 0xFF	; 255
    20be:	5f 4f       	sbci	r21, 0xFF	; 255

000020c0 <__divmodsi4_exit>:
    20c0:	08 95       	ret

000020c2 <__negsi2>:
    20c2:	90 95       	com	r25
    20c4:	80 95       	com	r24
    20c6:	70 95       	com	r23
    20c8:	61 95       	neg	r22
    20ca:	7f 4f       	sbci	r23, 0xFF	; 255
    20cc:	8f 4f       	sbci	r24, 0xFF	; 255
    20ce:	9f 4f       	sbci	r25, 0xFF	; 255
    20d0:	08 95       	ret

000020d2 <__tablejump2__>:
    20d2:	ee 0f       	add	r30, r30
    20d4:	ff 1f       	adc	r31, r31
    20d6:	05 90       	lpm	r0, Z+
    20d8:	f4 91       	lpm	r31, Z
    20da:	e0 2d       	mov	r30, r0
    20dc:	09 94       	ijmp

000020de <_exit>:
    20de:	f8 94       	cli

000020e0 <__stop_program>:
    20e0:	ff cf       	rjmp	.-2      	; 0x20e0 <__stop_program>
